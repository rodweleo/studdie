"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/jsbi";
exports.ids = ["vendor-chunks/jsbi"];
exports.modules = {

/***/ "(rsc)/./node_modules/jsbi/dist/jsbi.mjs":
/*!*****************************************!*\
  !*** ./node_modules/jsbi/dist/jsbi.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass JSBI extends Array{constructor(i,_){if(super(i),this.sign=_,Object.setPrototypeOf(this,JSBI.prototype),i>JSBI.__kMaxLength)throw new RangeError(\"Maximum BigInt size exceeded\")}static BigInt(i){var _=Math.floor,t=Number.isFinite;if(\"number\"==typeof i){if(0===i)return JSBI.__zero();if(JSBI.__isOneDigitInt(i))return 0>i?JSBI.__oneDigit(-i,!0):JSBI.__oneDigit(i,!1);if(!t(i)||_(i)!==i)throw new RangeError(\"The number \"+i+\" cannot be converted to BigInt because it is not an integer\");return JSBI.__fromDouble(i)}if(\"string\"==typeof i){const _=JSBI.__fromString(i);if(null===_)throw new SyntaxError(\"Cannot convert \"+i+\" to a BigInt\");return _}if(\"boolean\"==typeof i)return!0===i?JSBI.__oneDigit(1,!1):JSBI.__zero();if(\"object\"==typeof i){if(i.constructor===JSBI)return i;const _=JSBI.__toPrimitive(i);return JSBI.BigInt(_)}throw new TypeError(\"Cannot convert \"+i+\" to a BigInt\")}toDebugString(){const i=[\"BigInt[\"];for(const _ of this)i.push((_?(_>>>0).toString(16):_)+\", \");return i.push(\"]\"),i.join(\"\")}toString(i=10){if(2>i||36<i)throw new RangeError(\"toString() radix argument must be between 2 and 36\");return 0===this.length?\"0\":0==(i&i-1)?JSBI.__toStringBasePowerOfTwo(this,i):JSBI.__toStringGeneric(this,i,!1)}valueOf(){throw new Error(\"Convert JSBI instances to native numbers using `toNumber`.\")}static toNumber(i){const _=i.length;if(0===_)return 0;if(1===_){const _=i.__unsignedDigit(0);return i.sign?-_:_}const t=i.__digit(_-1),e=JSBI.__clz30(t),n=30*_-e;if(1024<n)return i.sign?-Infinity:1/0;let g=n-1,s=t,o=_-1;const l=e+3;let r=32===l?0:s<<l;r>>>=12;const a=l-12;let u=12<=l?0:s<<20+l,d=20+l;for(0<a&&0<o&&(o--,s=i.__digit(o),r|=s>>>30-a,u=s<<a+2,d=a+2);0<d&&0<o;)o--,s=i.__digit(o),u|=30<=d?s<<d-30:s>>>30-d,d-=30;const h=JSBI.__decideRounding(i,d,o,s);if((1===h||0===h&&1==(1&u))&&(u=u+1>>>0,0===u&&(r++,0!=r>>>20&&(r=0,g++,1023<g))))return i.sign?-Infinity:1/0;const m=i.sign?-2147483648:0;return g=g+1023<<20,JSBI.__kBitConversionInts[1]=m|g|r,JSBI.__kBitConversionInts[0]=u,JSBI.__kBitConversionDouble[0]}static unaryMinus(i){if(0===i.length)return i;const _=i.__copy();return _.sign=!i.sign,_}static bitwiseNot(i){return i.sign?JSBI.__absoluteSubOne(i).__trim():JSBI.__absoluteAddOne(i,!0)}static exponentiate(i,_){if(_.sign)throw new RangeError(\"Exponent must be positive\");if(0===_.length)return JSBI.__oneDigit(1,!1);if(0===i.length)return i;if(1===i.length&&1===i.__digit(0))return i.sign&&0==(1&_.__digit(0))?JSBI.unaryMinus(i):i;if(1<_.length)throw new RangeError(\"BigInt too big\");let t=_.__unsignedDigit(0);if(1===t)return i;if(t>=JSBI.__kMaxLengthBits)throw new RangeError(\"BigInt too big\");if(1===i.length&&2===i.__digit(0)){const _=1+(0|t/30),e=i.sign&&0!=(1&t),n=new JSBI(_,e);n.__initializeDigits();const g=1<<t%30;return n.__setDigit(_-1,g),n}let e=null,n=i;for(0!=(1&t)&&(e=i),t>>=1;0!==t;t>>=1)n=JSBI.multiply(n,n),0!=(1&t)&&(null===e?e=n:e=JSBI.multiply(e,n));return e}static multiply(_,t){if(0===_.length)return _;if(0===t.length)return t;let i=_.length+t.length;30<=_.__clzmsd()+t.__clzmsd()&&i--;const e=new JSBI(i,_.sign!==t.sign);e.__initializeDigits();for(let n=0;n<_.length;n++)JSBI.__multiplyAccumulate(t,_.__digit(n),e,n);return e.__trim()}static divide(i,_){if(0===_.length)throw new RangeError(\"Division by zero\");if(0>JSBI.__absoluteCompare(i,_))return JSBI.__zero();const t=i.sign!==_.sign,e=_.__unsignedDigit(0);let n;if(1===_.length&&32767>=e){if(1===e)return t===i.sign?i:JSBI.unaryMinus(i);n=JSBI.__absoluteDivSmall(i,e,null)}else n=JSBI.__absoluteDivLarge(i,_,!0,!1);return n.sign=t,n.__trim()}static remainder(i,_){if(0===_.length)throw new RangeError(\"Division by zero\");if(0>JSBI.__absoluteCompare(i,_))return i;const t=_.__unsignedDigit(0);if(1===_.length&&32767>=t){if(1===t)return JSBI.__zero();const _=JSBI.__absoluteModSmall(i,t);return 0===_?JSBI.__zero():JSBI.__oneDigit(_,i.sign)}const e=JSBI.__absoluteDivLarge(i,_,!1,!0);return e.sign=i.sign,e.__trim()}static add(i,_){const t=i.sign;return t===_.sign?JSBI.__absoluteAdd(i,_,t):0<=JSBI.__absoluteCompare(i,_)?JSBI.__absoluteSub(i,_,t):JSBI.__absoluteSub(_,i,!t)}static subtract(i,_){const t=i.sign;return t===_.sign?0<=JSBI.__absoluteCompare(i,_)?JSBI.__absoluteSub(i,_,t):JSBI.__absoluteSub(_,i,!t):JSBI.__absoluteAdd(i,_,t)}static leftShift(i,_){return 0===_.length||0===i.length?i:_.sign?JSBI.__rightShiftByAbsolute(i,_):JSBI.__leftShiftByAbsolute(i,_)}static signedRightShift(i,_){return 0===_.length||0===i.length?i:_.sign?JSBI.__leftShiftByAbsolute(i,_):JSBI.__rightShiftByAbsolute(i,_)}static unsignedRightShift(){throw new TypeError(\"BigInts have no unsigned right shift; use >> instead\")}static lessThan(i,_){return 0>JSBI.__compareToBigInt(i,_)}static lessThanOrEqual(i,_){return 0>=JSBI.__compareToBigInt(i,_)}static greaterThan(i,_){return 0<JSBI.__compareToBigInt(i,_)}static greaterThanOrEqual(i,_){return 0<=JSBI.__compareToBigInt(i,_)}static equal(_,t){if(_.sign!==t.sign)return!1;if(_.length!==t.length)return!1;for(let e=0;e<_.length;e++)if(_.__digit(e)!==t.__digit(e))return!1;return!0}static notEqual(i,_){return!JSBI.equal(i,_)}static bitwiseAnd(i,_){var t=Math.max;if(!i.sign&&!_.sign)return JSBI.__absoluteAnd(i,_).__trim();if(i.sign&&_.sign){const e=t(i.length,_.length)+1;let n=JSBI.__absoluteSubOne(i,e);const g=JSBI.__absoluteSubOne(_);return n=JSBI.__absoluteOr(n,g,n),JSBI.__absoluteAddOne(n,!0,n).__trim()}return i.sign&&([i,_]=[_,i]),JSBI.__absoluteAndNot(i,JSBI.__absoluteSubOne(_)).__trim()}static bitwiseXor(i,_){var t=Math.max;if(!i.sign&&!_.sign)return JSBI.__absoluteXor(i,_).__trim();if(i.sign&&_.sign){const e=t(i.length,_.length),n=JSBI.__absoluteSubOne(i,e),g=JSBI.__absoluteSubOne(_);return JSBI.__absoluteXor(n,g,n).__trim()}const e=t(i.length,_.length)+1;i.sign&&([i,_]=[_,i]);let n=JSBI.__absoluteSubOne(_,e);return n=JSBI.__absoluteXor(n,i,n),JSBI.__absoluteAddOne(n,!0,n).__trim()}static bitwiseOr(i,_){var t=Math.max;const e=t(i.length,_.length);if(!i.sign&&!_.sign)return JSBI.__absoluteOr(i,_).__trim();if(i.sign&&_.sign){let t=JSBI.__absoluteSubOne(i,e);const n=JSBI.__absoluteSubOne(_);return t=JSBI.__absoluteAnd(t,n,t),JSBI.__absoluteAddOne(t,!0,t).__trim()}i.sign&&([i,_]=[_,i]);let n=JSBI.__absoluteSubOne(_,e);return n=JSBI.__absoluteAndNot(n,i,n),JSBI.__absoluteAddOne(n,!0,n).__trim()}static asIntN(_,t){var i=Math.floor;if(0===t.length)return t;if(_=i(_),0>_)throw new RangeError(\"Invalid value: not (convertible to) a safe integer\");if(0===_)return JSBI.__zero();if(_>=JSBI.__kMaxLengthBits)return t;const e=0|(_+29)/30;if(t.length<e)return t;const g=t.__unsignedDigit(e-1),s=1<<(_-1)%30;if(t.length===e&&g<s)return t;if(!((g&s)===s))return JSBI.__truncateToNBits(_,t);if(!t.sign)return JSBI.__truncateAndSubFromPowerOfTwo(_,t,!0);if(0==(g&s-1)){for(let n=e-2;0<=n;n--)if(0!==t.__digit(n))return JSBI.__truncateAndSubFromPowerOfTwo(_,t,!1);return t.length===e&&g===s?t:JSBI.__truncateToNBits(_,t)}return JSBI.__truncateAndSubFromPowerOfTwo(_,t,!1)}static asUintN(i,_){var t=Math.floor;if(0===_.length)return _;if(i=t(i),0>i)throw new RangeError(\"Invalid value: not (convertible to) a safe integer\");if(0===i)return JSBI.__zero();if(_.sign){if(i>JSBI.__kMaxLengthBits)throw new RangeError(\"BigInt too big\");return JSBI.__truncateAndSubFromPowerOfTwo(i,_,!1)}if(i>=JSBI.__kMaxLengthBits)return _;const e=0|(i+29)/30;if(_.length<e)return _;const g=i%30;if(_.length==e){if(0===g)return _;const i=_.__digit(e-1);if(0==i>>>g)return _}return JSBI.__truncateToNBits(i,_)}static ADD(i,_){if(i=JSBI.__toPrimitive(i),_=JSBI.__toPrimitive(_),\"string\"==typeof i)return\"string\"!=typeof _&&(_=_.toString()),i+_;if(\"string\"==typeof _)return i.toString()+_;if(i=JSBI.__toNumeric(i),_=JSBI.__toNumeric(_),JSBI.__isBigInt(i)&&JSBI.__isBigInt(_))return JSBI.add(i,_);if(\"number\"==typeof i&&\"number\"==typeof _)return i+_;throw new TypeError(\"Cannot mix BigInt and other types, use explicit conversions\")}static LT(i,_){return JSBI.__compare(i,_,0)}static LE(i,_){return JSBI.__compare(i,_,1)}static GT(i,_){return JSBI.__compare(i,_,2)}static GE(i,_){return JSBI.__compare(i,_,3)}static EQ(i,_){for(;;){if(JSBI.__isBigInt(i))return JSBI.__isBigInt(_)?JSBI.equal(i,_):JSBI.EQ(_,i);if(\"number\"==typeof i){if(JSBI.__isBigInt(_))return JSBI.__equalToNumber(_,i);if(\"object\"!=typeof _)return i==_;_=JSBI.__toPrimitive(_)}else if(\"string\"==typeof i){if(JSBI.__isBigInt(_))return i=JSBI.__fromString(i),null!==i&&JSBI.equal(i,_);if(\"object\"!=typeof _)return i==_;_=JSBI.__toPrimitive(_)}else if(\"boolean\"==typeof i){if(JSBI.__isBigInt(_))return JSBI.__equalToNumber(_,+i);if(\"object\"!=typeof _)return i==_;_=JSBI.__toPrimitive(_)}else if(\"symbol\"==typeof i){if(JSBI.__isBigInt(_))return!1;if(\"object\"!=typeof _)return i==_;_=JSBI.__toPrimitive(_)}else if(\"object\"==typeof i){if(\"object\"==typeof _&&_.constructor!==JSBI)return i==_;i=JSBI.__toPrimitive(i)}else return i==_}}static NE(i,_){return!JSBI.EQ(i,_)}static DataViewGetBigInt64(i,_,t=!1){return JSBI.asIntN(64,JSBI.DataViewGetBigUint64(i,_,t))}static DataViewGetBigUint64(i,_,t=!1){const[e,n]=t?[4,0]:[0,4],g=i.getUint32(_+e,t),s=i.getUint32(_+n,t),o=new JSBI(3,!1);return o.__setDigit(0,1073741823&s),o.__setDigit(1,(268435455&g)<<2|s>>>30),o.__setDigit(2,g>>>28),o.__trim()}static DataViewSetBigInt64(i,_,t,e=!1){JSBI.DataViewSetBigUint64(i,_,t,e)}static DataViewSetBigUint64(i,_,t,e=!1){t=JSBI.asUintN(64,t);let n=0,g=0;if(0<t.length&&(g=t.__digit(0),1<t.length)){const i=t.__digit(1);g|=i<<30,n=i>>>2,2<t.length&&(n|=t.__digit(2)<<28)}const[s,o]=e?[4,0]:[0,4];i.setUint32(_+s,n,e),i.setUint32(_+o,g,e)}static __zero(){return new JSBI(0,!1)}static __oneDigit(i,_){const t=new JSBI(1,_);return t.__setDigit(0,i),t}__copy(){const _=new JSBI(this.length,this.sign);for(let t=0;t<this.length;t++)_[t]=this[t];return _}__trim(){let i=this.length,_=this[i-1];for(;0===_;)i--,_=this[i-1],this.pop();return 0===i&&(this.sign=!1),this}__initializeDigits(){for(let _=0;_<this.length;_++)this[_]=0}static __decideRounding(i,_,t,e){if(0<_)return-1;let n;if(0>_)n=-_-1;else{if(0===t)return-1;t--,e=i.__digit(t),n=29}let g=1<<n;if(0==(e&g))return-1;if(g-=1,0!=(e&g))return 1;for(;0<t;)if(t--,0!==i.__digit(t))return 1;return 0}static __fromDouble(i){JSBI.__kBitConversionDouble[0]=i;const _=2047&JSBI.__kBitConversionInts[1]>>>20,t=_-1023,e=(0|t/30)+1,n=new JSBI(e,0>i);let g=1048575&JSBI.__kBitConversionInts[1]|1048576,s=JSBI.__kBitConversionInts[0];const o=20,l=t%30;let r,a=0;if(l<20){const i=o-l;a=i+32,r=g>>>i,g=g<<32-i|s>>>i,s<<=32-i}else if(l===20)a=32,r=g,g=s,s=0;else{const i=l-o;a=32-i,r=g<<i|s>>>32-i,g=s<<i,s=0}n.__setDigit(e-1,r);for(let _=e-2;0<=_;_--)0<a?(a-=30,r=g>>>2,g=g<<30|s>>>2,s<<=30):r=0,n.__setDigit(_,r);return n.__trim()}static __isWhitespace(i){return!!(13>=i&&9<=i)||(159>=i?32==i:131071>=i?160==i||5760==i:196607>=i?(i&=131071,10>=i||40==i||41==i||47==i||95==i||4096==i):65279==i)}static __fromString(i,_=0){let t=0;const e=i.length;let n=0;if(n===e)return JSBI.__zero();let g=i.charCodeAt(n);for(;JSBI.__isWhitespace(g);){if(++n===e)return JSBI.__zero();g=i.charCodeAt(n)}if(43===g){if(++n===e)return null;g=i.charCodeAt(n),t=1}else if(45===g){if(++n===e)return null;g=i.charCodeAt(n),t=-1}if(0===_){if(_=10,48===g){if(++n===e)return JSBI.__zero();if(g=i.charCodeAt(n),88===g||120===g){if(_=16,++n===e)return null;g=i.charCodeAt(n)}else if(79===g||111===g){if(_=8,++n===e)return null;g=i.charCodeAt(n)}else if(66===g||98===g){if(_=2,++n===e)return null;g=i.charCodeAt(n)}}}else if(16===_&&48===g){if(++n===e)return JSBI.__zero();if(g=i.charCodeAt(n),88===g||120===g){if(++n===e)return null;g=i.charCodeAt(n)}}if(0!=t&&10!==_)return null;for(;48===g;){if(++n===e)return JSBI.__zero();g=i.charCodeAt(n)}const s=e-n;let o=JSBI.__kMaxBitsPerChar[_],l=JSBI.__kBitsPerCharTableMultiplier-1;if(s>1073741824/o)return null;const r=o*s+l>>>JSBI.__kBitsPerCharTableShift,a=new JSBI(0|(r+29)/30,!1),u=10>_?_:10,h=10<_?_-10:0;if(0==(_&_-1)){o>>=JSBI.__kBitsPerCharTableShift;const _=[],t=[];let s=!1;do{let l=0,r=0;for(;;){let _;if(g-48>>>0<u)_=g-48;else if((32|g)-97>>>0<h)_=(32|g)-87;else{s=!0;break}if(r+=o,l=l<<o|_,++n===e){s=!0;break}if(g=i.charCodeAt(n),30<r+o)break}_.push(l),t.push(r)}while(!s);JSBI.__fillFromParts(a,_,t)}else{a.__initializeDigits();let t=!1,s=0;do{let r=0,b=1;for(;;){let o;if(g-48>>>0<u)o=g-48;else if((32|g)-97>>>0<h)o=(32|g)-87;else{t=!0;break}const l=b*_;if(1073741823<l)break;if(b=l,r=r*_+o,s++,++n===e){t=!0;break}g=i.charCodeAt(n)}l=30*JSBI.__kBitsPerCharTableMultiplier-1;const D=0|(o*s+l>>>JSBI.__kBitsPerCharTableShift)/30;a.__inplaceMultiplyAdd(b,r,D)}while(!t)}if(n!==e){if(!JSBI.__isWhitespace(g))return null;for(n++;n<e;n++)if(g=i.charCodeAt(n),!JSBI.__isWhitespace(g))return null}return a.sign=-1==t,a.__trim()}static __fillFromParts(_,t,e){let n=0,g=0,s=0;for(let o=t.length-1;0<=o;o--){const i=t[o],l=e[o];g|=i<<s,s+=l,30===s?(_.__setDigit(n++,g),s=0,g=0):30<s&&(_.__setDigit(n++,1073741823&g),s-=30,g=i>>>l-s)}if(0!==g){if(n>=_.length)throw new Error(\"implementation bug\");_.__setDigit(n++,g)}for(;n<_.length;n++)_.__setDigit(n,0)}static __toStringBasePowerOfTwo(_,i){const t=_.length;let e=i-1;e=(85&e>>>1)+(85&e),e=(51&e>>>2)+(51&e),e=(15&e>>>4)+(15&e);const n=e,g=i-1,s=_.__digit(t-1),o=JSBI.__clz30(s);let l=0|(30*t-o+n-1)/n;if(_.sign&&l++,268435456<l)throw new Error(\"string too long\");const r=Array(l);let a=l-1,u=0,d=0;for(let e=0;e<t-1;e++){const i=_.__digit(e),t=(u|i<<d)&g;r[a--]=JSBI.__kConversionChars[t];const s=n-d;for(u=i>>>s,d=30-s;d>=n;)r[a--]=JSBI.__kConversionChars[u&g],u>>>=n,d-=n}const h=(u|s<<d)&g;for(r[a--]=JSBI.__kConversionChars[h],u=s>>>n-d;0!==u;)r[a--]=JSBI.__kConversionChars[u&g],u>>>=n;if(_.sign&&(r[a--]=\"-\"),-1!=a)throw new Error(\"implementation bug\");return r.join(\"\")}static __toStringGeneric(_,i,t){const e=_.length;if(0===e)return\"\";if(1===e){let e=_.__unsignedDigit(0).toString(i);return!1===t&&_.sign&&(e=\"-\"+e),e}const n=30*e-JSBI.__clz30(_.__digit(e-1)),g=JSBI.__kMaxBitsPerChar[i],s=g-1;let o=n*JSBI.__kBitsPerCharTableMultiplier;o+=s-1,o=0|o/s;const l=o+1>>1,r=JSBI.exponentiate(JSBI.__oneDigit(i,!1),JSBI.__oneDigit(l,!1));let a,u;const d=r.__unsignedDigit(0);if(1===r.length&&32767>=d){a=new JSBI(_.length,!1),a.__initializeDigits();let t=0;for(let e=2*_.length-1;0<=e;e--){const i=t<<15|_.__halfDigit(e);a.__setHalfDigit(e,0|i/d),t=0|i%d}u=t.toString(i)}else{const t=JSBI.__absoluteDivLarge(_,r,!0,!0);a=t.quotient;const e=t.remainder.__trim();u=JSBI.__toStringGeneric(e,i,!0)}a.__trim();let h=JSBI.__toStringGeneric(a,i,!0);for(;u.length<l;)u=\"0\"+u;return!1===t&&_.sign&&(h=\"-\"+h),h+u}static __unequalSign(i){return i?-1:1}static __absoluteGreater(i){return i?-1:1}static __absoluteLess(i){return i?1:-1}static __compareToBigInt(i,_){const t=i.sign;if(t!==_.sign)return JSBI.__unequalSign(t);const e=JSBI.__absoluteCompare(i,_);return 0<e?JSBI.__absoluteGreater(t):0>e?JSBI.__absoluteLess(t):0}static __compareToNumber(i,_){if(JSBI.__isOneDigitInt(_)){const t=i.sign,e=0>_;if(t!==e)return JSBI.__unequalSign(t);if(0===i.length){if(e)throw new Error(\"implementation bug\");return 0===_?0:-1}if(1<i.length)return JSBI.__absoluteGreater(t);const n=Math.abs(_),g=i.__unsignedDigit(0);return g>n?JSBI.__absoluteGreater(t):g<n?JSBI.__absoluteLess(t):0}return JSBI.__compareToDouble(i,_)}static __compareToDouble(i,_){if(_!==_)return _;if(_===1/0)return-1;if(_===-Infinity)return 1;const t=i.sign;if(t!==0>_)return JSBI.__unequalSign(t);if(0===_)throw new Error(\"implementation bug: should be handled elsewhere\");if(0===i.length)return-1;JSBI.__kBitConversionDouble[0]=_;const e=2047&JSBI.__kBitConversionInts[1]>>>20;if(2047==e)throw new Error(\"implementation bug: handled elsewhere\");const n=e-1023;if(0>n)return JSBI.__absoluteGreater(t);const g=i.length;let s=i.__digit(g-1);const o=JSBI.__clz30(s),l=30*g-o,r=n+1;if(l<r)return JSBI.__absoluteLess(t);if(l>r)return JSBI.__absoluteGreater(t);let a=1048576|1048575&JSBI.__kBitConversionInts[1],u=JSBI.__kBitConversionInts[0];const d=20,h=29-o;if(h!==(0|(l-1)%30))throw new Error(\"implementation bug\");let m,b=0;if(20>h){const i=d-h;b=i+32,m=a>>>i,a=a<<32-i|u>>>i,u<<=32-i}else if(20===h)b=32,m=a,a=u,u=0;else{const i=h-d;b=32-i,m=a<<i|u>>>32-i,a=u<<i,u=0}if(s>>>=0,m>>>=0,s>m)return JSBI.__absoluteGreater(t);if(s<m)return JSBI.__absoluteLess(t);for(let e=g-2;0<=e;e--){0<b?(b-=30,m=a>>>2,a=a<<30|u>>>2,u<<=30):m=0;const _=i.__unsignedDigit(e);if(_>m)return JSBI.__absoluteGreater(t);if(_<m)return JSBI.__absoluteLess(t)}if(0!==a||0!==u){if(0===b)throw new Error(\"implementation bug\");return JSBI.__absoluteLess(t)}return 0}static __equalToNumber(i,_){var t=Math.abs;return JSBI.__isOneDigitInt(_)?0===_?0===i.length:1===i.length&&i.sign===0>_&&i.__unsignedDigit(0)===t(_):0===JSBI.__compareToDouble(i,_)}static __comparisonResultToBool(i,_){return 0===_?0>i:1===_?0>=i:2===_?0<i:3===_?0<=i:void 0}static __compare(i,_,t){if(i=JSBI.__toPrimitive(i),_=JSBI.__toPrimitive(_),\"string\"==typeof i&&\"string\"==typeof _)switch(t){case 0:return i<_;case 1:return i<=_;case 2:return i>_;case 3:return i>=_;}if(JSBI.__isBigInt(i)&&\"string\"==typeof _)return _=JSBI.__fromString(_),null!==_&&JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(i,_),t);if(\"string\"==typeof i&&JSBI.__isBigInt(_))return i=JSBI.__fromString(i),null!==i&&JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(i,_),t);if(i=JSBI.__toNumeric(i),_=JSBI.__toNumeric(_),JSBI.__isBigInt(i)){if(JSBI.__isBigInt(_))return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(i,_),t);if(\"number\"!=typeof _)throw new Error(\"implementation bug\");return JSBI.__comparisonResultToBool(JSBI.__compareToNumber(i,_),t)}if(\"number\"!=typeof i)throw new Error(\"implementation bug\");if(JSBI.__isBigInt(_))return JSBI.__comparisonResultToBool(JSBI.__compareToNumber(_,i),2^t);if(\"number\"!=typeof _)throw new Error(\"implementation bug\");return 0===t?i<_:1===t?i<=_:2===t?i>_:3===t?i>=_:void 0}__clzmsd(){return JSBI.__clz30(this.__digit(this.length-1))}static __absoluteAdd(_,t,e){if(_.length<t.length)return JSBI.__absoluteAdd(t,_,e);if(0===_.length)return _;if(0===t.length)return _.sign===e?_:JSBI.unaryMinus(_);let n=_.length;(0===_.__clzmsd()||t.length===_.length&&0===t.__clzmsd())&&n++;const g=new JSBI(n,e);let s=0,o=0;for(;o<t.length;o++){const i=_.__digit(o)+t.__digit(o)+s;s=i>>>30,g.__setDigit(o,1073741823&i)}for(;o<_.length;o++){const i=_.__digit(o)+s;s=i>>>30,g.__setDigit(o,1073741823&i)}return o<g.length&&g.__setDigit(o,s),g.__trim()}static __absoluteSub(_,t,e){if(0===_.length)return _;if(0===t.length)return _.sign===e?_:JSBI.unaryMinus(_);const n=new JSBI(_.length,e);let g=0,s=0;for(;s<t.length;s++){const i=_.__digit(s)-t.__digit(s)-g;g=1&i>>>30,n.__setDigit(s,1073741823&i)}for(;s<_.length;s++){const i=_.__digit(s)-g;g=1&i>>>30,n.__setDigit(s,1073741823&i)}return n.__trim()}static __absoluteAddOne(_,i,t=null){const e=_.length;null===t?t=new JSBI(e,i):t.sign=i;let n=1;for(let g=0;g<e;g++){const i=_.__digit(g)+n;n=i>>>30,t.__setDigit(g,1073741823&i)}return 0!=n&&t.__setDigitGrow(e,1),t}static __absoluteSubOne(_,t){const e=_.length;t=t||e;const n=new JSBI(t,!1);let g=1;for(let s=0;s<e;s++){const i=_.__digit(s)-g;g=1&i>>>30,n.__setDigit(s,1073741823&i)}if(0!=g)throw new Error(\"implementation bug\");for(let g=e;g<t;g++)n.__setDigit(g,0);return n}static __absoluteAnd(_,t,e=null){let n=_.length,g=t.length,s=g;if(n<g){s=n;const i=_,e=n;_=t,n=g,t=i,g=e}let o=s;null===e?e=new JSBI(o,!1):o=e.length;let l=0;for(;l<s;l++)e.__setDigit(l,_.__digit(l)&t.__digit(l));for(;l<o;l++)e.__setDigit(l,0);return e}static __absoluteAndNot(_,t,e=null){const n=_.length,g=t.length;let s=g;n<g&&(s=n);let o=n;null===e?e=new JSBI(o,!1):o=e.length;let l=0;for(;l<s;l++)e.__setDigit(l,_.__digit(l)&~t.__digit(l));for(;l<n;l++)e.__setDigit(l,_.__digit(l));for(;l<o;l++)e.__setDigit(l,0);return e}static __absoluteOr(_,t,e=null){let n=_.length,g=t.length,s=g;if(n<g){s=n;const i=_,e=n;_=t,n=g,t=i,g=e}let o=n;null===e?e=new JSBI(o,!1):o=e.length;let l=0;for(;l<s;l++)e.__setDigit(l,_.__digit(l)|t.__digit(l));for(;l<n;l++)e.__setDigit(l,_.__digit(l));for(;l<o;l++)e.__setDigit(l,0);return e}static __absoluteXor(_,t,e=null){let n=_.length,g=t.length,s=g;if(n<g){s=n;const i=_,e=n;_=t,n=g,t=i,g=e}let o=n;null===e?e=new JSBI(o,!1):o=e.length;let l=0;for(;l<s;l++)e.__setDigit(l,_.__digit(l)^t.__digit(l));for(;l<n;l++)e.__setDigit(l,_.__digit(l));for(;l<o;l++)e.__setDigit(l,0);return e}static __absoluteCompare(_,t){const e=_.length-t.length;if(0!=e)return e;let n=_.length-1;for(;0<=n&&_.__digit(n)===t.__digit(n);)n--;return 0>n?0:_.__unsignedDigit(n)>t.__unsignedDigit(n)?1:-1}static __multiplyAccumulate(_,t,e,n){if(0===t)return;const g=32767&t,s=t>>>15;let o=0,l=0;for(let r,a=0;a<_.length;a++,n++){r=e.__digit(n);const i=_.__digit(a),t=32767&i,u=i>>>15,d=JSBI.__imul(t,g),h=JSBI.__imul(t,s),m=JSBI.__imul(u,g),b=JSBI.__imul(u,s);r+=l+d+o,o=r>>>30,r&=1073741823,r+=((32767&h)<<15)+((32767&m)<<15),o+=r>>>30,l=b+(h>>>15)+(m>>>15),e.__setDigit(n,1073741823&r)}for(;0!=o||0!==l;n++){let i=e.__digit(n);i+=o+l,l=0,o=i>>>30,e.__setDigit(n,1073741823&i)}}static __internalMultiplyAdd(_,t,e,g,s){let o=e,l=0;for(let n=0;n<g;n++){const i=_.__digit(n),e=JSBI.__imul(32767&i,t),g=JSBI.__imul(i>>>15,t),a=e+((32767&g)<<15)+l+o;o=a>>>30,l=g>>>15,s.__setDigit(n,1073741823&a)}if(s.length>g)for(s.__setDigit(g++,o+l);g<s.length;)s.__setDigit(g++,0);else if(0!==o+l)throw new Error(\"implementation bug\")}__inplaceMultiplyAdd(i,_,t){t>this.length&&(t=this.length);const e=32767&i,n=i>>>15;let g=0,s=_;for(let o=0;o<t;o++){const i=this.__digit(o),_=32767&i,t=i>>>15,l=JSBI.__imul(_,e),r=JSBI.__imul(_,n),a=JSBI.__imul(t,e),u=JSBI.__imul(t,n);let d=s+l+g;g=d>>>30,d&=1073741823,d+=((32767&r)<<15)+((32767&a)<<15),g+=d>>>30,s=u+(r>>>15)+(a>>>15),this.__setDigit(o,1073741823&d)}if(0!=g||0!==s)throw new Error(\"implementation bug\")}static __absoluteDivSmall(_,t,e=null){null===e&&(e=new JSBI(_.length,!1));let n=0;for(let g,s=2*_.length-1;0<=s;s-=2){g=(n<<15|_.__halfDigit(s))>>>0;const i=0|g/t;n=0|g%t,g=(n<<15|_.__halfDigit(s-1))>>>0;const o=0|g/t;n=0|g%t,e.__setDigit(s>>>1,i<<15|o)}return e}static __absoluteModSmall(_,t){let e=0;for(let n=2*_.length-1;0<=n;n--){const i=(e<<15|_.__halfDigit(n))>>>0;e=0|i%t}return e}static __absoluteDivLarge(i,_,t,e){const g=_.__halfDigitLength(),n=_.length,s=i.__halfDigitLength()-g;let o=null;t&&(o=new JSBI(s+2>>>1,!1),o.__initializeDigits());const l=new JSBI(g+2>>>1,!1);l.__initializeDigits();const r=JSBI.__clz15(_.__halfDigit(g-1));0<r&&(_=JSBI.__specialLeftShift(_,r,0));const a=JSBI.__specialLeftShift(i,r,1),u=_.__halfDigit(g-1);let d=0;for(let r,h=s;0<=h;h--){r=32767;const i=a.__halfDigit(h+g);if(i!==u){const t=(i<<15|a.__halfDigit(h+g-1))>>>0;r=0|t/u;let e=0|t%u;const n=_.__halfDigit(g-2),s=a.__halfDigit(h+g-2);for(;JSBI.__imul(r,n)>>>0>(e<<16|s)>>>0&&(r--,e+=u,!(32767<e)););}JSBI.__internalMultiplyAdd(_,r,0,n,l);let e=a.__inplaceSub(l,h,g+1);0!==e&&(e=a.__inplaceAdd(_,h,g),a.__setHalfDigit(h+g,32767&a.__halfDigit(h+g)+e),r--),t&&(1&h?d=r<<15:o.__setDigit(h>>>1,d|r))}if(e)return a.__inplaceRightShift(r),t?{quotient:o,remainder:a}:a;if(t)return o;throw new Error(\"unreachable\")}static __clz15(i){return JSBI.__clz30(i)-15}__inplaceAdd(_,t,e){let n=0;for(let g=0;g<e;g++){const i=this.__halfDigit(t+g)+_.__halfDigit(g)+n;n=i>>>15,this.__setHalfDigit(t+g,32767&i)}return n}__inplaceSub(_,t,e){let n=0;if(1&t){t>>=1;let g=this.__digit(t),s=32767&g,o=0;for(;o<e-1>>>1;o++){const i=_.__digit(o),e=(g>>>15)-(32767&i)-n;n=1&e>>>15,this.__setDigit(t+o,(32767&e)<<15|32767&s),g=this.__digit(t+o+1),s=(32767&g)-(i>>>15)-n,n=1&s>>>15}const i=_.__digit(o),l=(g>>>15)-(32767&i)-n;n=1&l>>>15,this.__setDigit(t+o,(32767&l)<<15|32767&s);if(t+o+1>=this.length)throw new RangeError(\"out of bounds\");0==(1&e)&&(g=this.__digit(t+o+1),s=(32767&g)-(i>>>15)-n,n=1&s>>>15,this.__setDigit(t+_.length,1073709056&g|32767&s))}else{t>>=1;let g=0;for(;g<_.length-1;g++){const i=this.__digit(t+g),e=_.__digit(g),s=(32767&i)-(32767&e)-n;n=1&s>>>15;const o=(i>>>15)-(e>>>15)-n;n=1&o>>>15,this.__setDigit(t+g,(32767&o)<<15|32767&s)}const i=this.__digit(t+g),s=_.__digit(g),o=(32767&i)-(32767&s)-n;n=1&o>>>15;let l=0;0==(1&e)&&(l=(i>>>15)-(s>>>15)-n,n=1&l>>>15),this.__setDigit(t+g,(32767&l)<<15|32767&o)}return n}__inplaceRightShift(_){if(0===_)return;let t=this.__digit(0)>>>_;const e=this.length-1;for(let n=0;n<e;n++){const i=this.__digit(n+1);this.__setDigit(n,1073741823&i<<30-_|t),t=i>>>_}this.__setDigit(e,t)}static __specialLeftShift(_,t,e){const g=_.length,n=new JSBI(g+e,!1);if(0===t){for(let t=0;t<g;t++)n.__setDigit(t,_.__digit(t));return 0<e&&n.__setDigit(g,0),n}let s=0;for(let o=0;o<g;o++){const i=_.__digit(o);n.__setDigit(o,1073741823&i<<t|s),s=i>>>30-t}return 0<e&&n.__setDigit(g,s),n}static __leftShiftByAbsolute(_,i){const t=JSBI.__toShiftAmount(i);if(0>t)throw new RangeError(\"BigInt too big\");const e=0|t/30,n=t%30,g=_.length,s=0!==n&&0!=_.__digit(g-1)>>>30-n,o=g+e+(s?1:0),l=new JSBI(o,_.sign);if(0===n){let t=0;for(;t<e;t++)l.__setDigit(t,0);for(;t<o;t++)l.__setDigit(t,_.__digit(t-e))}else{let t=0;for(let _=0;_<e;_++)l.__setDigit(_,0);for(let s=0;s<g;s++){const i=_.__digit(s);l.__setDigit(s+e,1073741823&i<<n|t),t=i>>>30-n}if(s)l.__setDigit(g+e,t);else if(0!==t)throw new Error(\"implementation bug\")}return l.__trim()}static __rightShiftByAbsolute(_,i){const t=_.length,e=_.sign,n=JSBI.__toShiftAmount(i);if(0>n)return JSBI.__rightShiftByMaximum(e);const g=0|n/30,s=n%30;let o=t-g;if(0>=o)return JSBI.__rightShiftByMaximum(e);let l=!1;if(e){if(0!=(_.__digit(g)&(1<<s)-1))l=!0;else for(let t=0;t<g;t++)if(0!==_.__digit(t)){l=!0;break}}if(l&&0===s){const i=_.__digit(t-1);0==~i&&o++}let r=new JSBI(o,e);if(0===s){r.__setDigit(o-1,0);for(let e=g;e<t;e++)r.__setDigit(e-g,_.__digit(e))}else{let e=_.__digit(g)>>>s;const n=t-g-1;for(let t=0;t<n;t++){const i=_.__digit(t+g+1);r.__setDigit(t,1073741823&i<<30-s|e),e=i>>>s}r.__setDigit(n,e)}return l&&(r=JSBI.__absoluteAddOne(r,!0,r)),r.__trim()}static __rightShiftByMaximum(i){return i?JSBI.__oneDigit(1,!0):JSBI.__zero()}static __toShiftAmount(i){if(1<i.length)return-1;const _=i.__unsignedDigit(0);return _>JSBI.__kMaxLengthBits?-1:_}static __toPrimitive(i,_=\"default\"){if(\"object\"!=typeof i)return i;if(i.constructor===JSBI)return i;if(\"undefined\"!=typeof Symbol&&\"symbol\"==typeof Symbol.toPrimitive){const t=i[Symbol.toPrimitive];if(t){const i=t(_);if(\"object\"!=typeof i)return i;throw new TypeError(\"Cannot convert object to primitive value\")}}const t=i.valueOf;if(t){const _=t.call(i);if(\"object\"!=typeof _)return _}const e=i.toString;if(e){const _=e.call(i);if(\"object\"!=typeof _)return _}throw new TypeError(\"Cannot convert object to primitive value\")}static __toNumeric(i){return JSBI.__isBigInt(i)?i:+i}static __isBigInt(i){return\"object\"==typeof i&&null!==i&&i.constructor===JSBI}static __truncateToNBits(i,_){const t=0|(i+29)/30,e=new JSBI(t,_.sign),n=t-1;for(let t=0;t<n;t++)e.__setDigit(t,_.__digit(t));let g=_.__digit(n);if(0!=i%30){const _=32-i%30;g=g<<_>>>_}return e.__setDigit(n,g),e.__trim()}static __truncateAndSubFromPowerOfTwo(_,t,e){var n=Math.min;const g=0|(_+29)/30,s=new JSBI(g,e);let o=0;const l=g-1;let a=0;for(const i=n(l,t.length);o<i;o++){const i=0-t.__digit(o)-a;a=1&i>>>30,s.__setDigit(o,1073741823&i)}for(;o<l;o++)s.__setDigit(o,0|1073741823&-a);let u=l<t.length?t.__digit(l):0;const d=_%30;let h;if(0==d)h=0-u-a,h&=1073741823;else{const i=32-d;u=u<<i>>>i;const _=1<<32-i;h=_-u-a,h&=_-1}return s.__setDigit(l,h),s.__trim()}__digit(_){return this[_]}__unsignedDigit(_){return this[_]>>>0}__setDigit(_,i){this[_]=0|i}__setDigitGrow(_,i){this[_]=0|i}__halfDigitLength(){const i=this.length;return 32767>=this.__unsignedDigit(i-1)?2*i-1:2*i}__halfDigit(_){return 32767&this[_>>>1]>>>15*(1&_)}__setHalfDigit(_,i){const t=_>>>1,e=this.__digit(t),n=1&_?32767&e|i<<15:1073709056&e|32767&i;this.__setDigit(t,n)}static __digitPow(i,_){let t=1;for(;0<_;)1&_&&(t*=i),_>>>=1,i*=i;return t}static __isOneDigitInt(i){return(1073741823&i)===i}}JSBI.__kMaxLength=33554432,JSBI.__kMaxLengthBits=JSBI.__kMaxLength<<5,JSBI.__kMaxBitsPerChar=[0,0,32,51,64,75,83,90,96,102,107,111,115,119,122,126,128,131,134,136,139,141,143,145,147,149,151,153,154,156,158,159,160,162,163,165,166],JSBI.__kBitsPerCharTableShift=5,JSBI.__kBitsPerCharTableMultiplier=1<<JSBI.__kBitsPerCharTableShift,JSBI.__kConversionChars=[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"],JSBI.__kBitConversionBuffer=new ArrayBuffer(8),JSBI.__kBitConversionDouble=new Float64Array(JSBI.__kBitConversionBuffer),JSBI.__kBitConversionInts=new Int32Array(JSBI.__kBitConversionBuffer),JSBI.__clz30=Math.clz32?function(i){return Math.clz32(i)-2}:function(i){return 0===i?30:0|29-(0|Math.log(i>>>0)/Math.LN2)},JSBI.__imul=Math.imul||function(i,_){return 0|i*_};/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (JSBI);\n//# sourceMappingURL=jsbi.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QXFCLHVCQUF1QixRQUFRLEtBQUssSUFBSSx5QkFBeUIsU0FBUywwQkFBMEIsMEJBQTBCLHl0QkFBeXRCLHVCQUF1QixhQUFhLGtEQUFrRCxzQ0FBc0MsY0FBYyxpRUFBZSxJQUFJLEVBQUM7QUFDbGs0QiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0dWRkaWUvLi9ub2RlX21vZHVsZXMvanNiaS9kaXN0L2pzYmkubWpzP2VhOWQiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgSlNCSSBleHRlbmRzIEFycmF5e2NvbnN0cnVjdG9yKGksXyl7aWYoc3VwZXIoaSksdGhpcy5zaWduPV8sT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsSlNCSS5wcm90b3R5cGUpLGk+SlNCSS5fX2tNYXhMZW5ndGgpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJNYXhpbXVtIEJpZ0ludCBzaXplIGV4Y2VlZGVkXCIpfXN0YXRpYyBCaWdJbnQoaSl7dmFyIF89TWF0aC5mbG9vcix0PU51bWJlci5pc0Zpbml0ZTtpZihcIm51bWJlclwiPT10eXBlb2YgaSl7aWYoMD09PWkpcmV0dXJuIEpTQkkuX196ZXJvKCk7aWYoSlNCSS5fX2lzT25lRGlnaXRJbnQoaSkpcmV0dXJuIDA+aT9KU0JJLl9fb25lRGlnaXQoLWksITApOkpTQkkuX19vbmVEaWdpdChpLCExKTtpZighdChpKXx8XyhpKSE9PWkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJUaGUgbnVtYmVyIFwiK2krXCIgY2Fubm90IGJlIGNvbnZlcnRlZCB0byBCaWdJbnQgYmVjYXVzZSBpdCBpcyBub3QgYW4gaW50ZWdlclwiKTtyZXR1cm4gSlNCSS5fX2Zyb21Eb3VibGUoaSl9aWYoXCJzdHJpbmdcIj09dHlwZW9mIGkpe2NvbnN0IF89SlNCSS5fX2Zyb21TdHJpbmcoaSk7aWYobnVsbD09PV8pdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiQ2Fubm90IGNvbnZlcnQgXCIraStcIiB0byBhIEJpZ0ludFwiKTtyZXR1cm4gX31pZihcImJvb2xlYW5cIj09dHlwZW9mIGkpcmV0dXJuITA9PT1pP0pTQkkuX19vbmVEaWdpdCgxLCExKTpKU0JJLl9femVybygpO2lmKFwib2JqZWN0XCI9PXR5cGVvZiBpKXtpZihpLmNvbnN0cnVjdG9yPT09SlNCSSlyZXR1cm4gaTtjb25zdCBfPUpTQkkuX190b1ByaW1pdGl2ZShpKTtyZXR1cm4gSlNCSS5CaWdJbnQoXyl9dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjb252ZXJ0IFwiK2krXCIgdG8gYSBCaWdJbnRcIil9dG9EZWJ1Z1N0cmluZygpe2NvbnN0IGk9W1wiQmlnSW50W1wiXTtmb3IoY29uc3QgXyBvZiB0aGlzKWkucHVzaCgoXz8oXz4+PjApLnRvU3RyaW5nKDE2KTpfKStcIiwgXCIpO3JldHVybiBpLnB1c2goXCJdXCIpLGkuam9pbihcIlwiKX10b1N0cmluZyhpPTEwKXtpZigyPml8fDM2PGkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJ0b1N0cmluZygpIHJhZGl4IGFyZ3VtZW50IG11c3QgYmUgYmV0d2VlbiAyIGFuZCAzNlwiKTtyZXR1cm4gMD09PXRoaXMubGVuZ3RoP1wiMFwiOjA9PShpJmktMSk/SlNCSS5fX3RvU3RyaW5nQmFzZVBvd2VyT2ZUd28odGhpcyxpKTpKU0JJLl9fdG9TdHJpbmdHZW5lcmljKHRoaXMsaSwhMSl9dmFsdWVPZigpe3Rocm93IG5ldyBFcnJvcihcIkNvbnZlcnQgSlNCSSBpbnN0YW5jZXMgdG8gbmF0aXZlIG51bWJlcnMgdXNpbmcgYHRvTnVtYmVyYC5cIil9c3RhdGljIHRvTnVtYmVyKGkpe2NvbnN0IF89aS5sZW5ndGg7aWYoMD09PV8pcmV0dXJuIDA7aWYoMT09PV8pe2NvbnN0IF89aS5fX3Vuc2lnbmVkRGlnaXQoMCk7cmV0dXJuIGkuc2lnbj8tXzpffWNvbnN0IHQ9aS5fX2RpZ2l0KF8tMSksZT1KU0JJLl9fY2x6MzAodCksbj0zMCpfLWU7aWYoMTAyNDxuKXJldHVybiBpLnNpZ24/LUluZmluaXR5OjEvMDtsZXQgZz1uLTEscz10LG89Xy0xO2NvbnN0IGw9ZSszO2xldCByPTMyPT09bD8wOnM8PGw7cj4+Pj0xMjtjb25zdCBhPWwtMTI7bGV0IHU9MTI8PWw/MDpzPDwyMCtsLGQ9MjArbDtmb3IoMDxhJiYwPG8mJihvLS0scz1pLl9fZGlnaXQobykscnw9cz4+PjMwLWEsdT1zPDxhKzIsZD1hKzIpOzA8ZCYmMDxvOylvLS0scz1pLl9fZGlnaXQobyksdXw9MzA8PWQ/czw8ZC0zMDpzPj4+MzAtZCxkLT0zMDtjb25zdCBoPUpTQkkuX19kZWNpZGVSb3VuZGluZyhpLGQsbyxzKTtpZigoMT09PWh8fDA9PT1oJiYxPT0oMSZ1KSkmJih1PXUrMT4+PjAsMD09PXUmJihyKyssMCE9cj4+PjIwJiYocj0wLGcrKywxMDIzPGcpKSkpcmV0dXJuIGkuc2lnbj8tSW5maW5pdHk6MS8wO2NvbnN0IG09aS5zaWduPy0yMTQ3NDgzNjQ4OjA7cmV0dXJuIGc9ZysxMDIzPDwyMCxKU0JJLl9fa0JpdENvbnZlcnNpb25JbnRzWzFdPW18Z3xyLEpTQkkuX19rQml0Q29udmVyc2lvbkludHNbMF09dSxKU0JJLl9fa0JpdENvbnZlcnNpb25Eb3VibGVbMF19c3RhdGljIHVuYXJ5TWludXMoaSl7aWYoMD09PWkubGVuZ3RoKXJldHVybiBpO2NvbnN0IF89aS5fX2NvcHkoKTtyZXR1cm4gXy5zaWduPSFpLnNpZ24sX31zdGF0aWMgYml0d2lzZU5vdChpKXtyZXR1cm4gaS5zaWduP0pTQkkuX19hYnNvbHV0ZVN1Yk9uZShpKS5fX3RyaW0oKTpKU0JJLl9fYWJzb2x1dGVBZGRPbmUoaSwhMCl9c3RhdGljIGV4cG9uZW50aWF0ZShpLF8pe2lmKF8uc2lnbil0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkV4cG9uZW50IG11c3QgYmUgcG9zaXRpdmVcIik7aWYoMD09PV8ubGVuZ3RoKXJldHVybiBKU0JJLl9fb25lRGlnaXQoMSwhMSk7aWYoMD09PWkubGVuZ3RoKXJldHVybiBpO2lmKDE9PT1pLmxlbmd0aCYmMT09PWkuX19kaWdpdCgwKSlyZXR1cm4gaS5zaWduJiYwPT0oMSZfLl9fZGlnaXQoMCkpP0pTQkkudW5hcnlNaW51cyhpKTppO2lmKDE8Xy5sZW5ndGgpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJCaWdJbnQgdG9vIGJpZ1wiKTtsZXQgdD1fLl9fdW5zaWduZWREaWdpdCgwKTtpZigxPT09dClyZXR1cm4gaTtpZih0Pj1KU0JJLl9fa01heExlbmd0aEJpdHMpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJCaWdJbnQgdG9vIGJpZ1wiKTtpZigxPT09aS5sZW5ndGgmJjI9PT1pLl9fZGlnaXQoMCkpe2NvbnN0IF89MSsoMHx0LzMwKSxlPWkuc2lnbiYmMCE9KDEmdCksbj1uZXcgSlNCSShfLGUpO24uX19pbml0aWFsaXplRGlnaXRzKCk7Y29uc3QgZz0xPDx0JTMwO3JldHVybiBuLl9fc2V0RGlnaXQoXy0xLGcpLG59bGV0IGU9bnVsbCxuPWk7Zm9yKDAhPSgxJnQpJiYoZT1pKSx0Pj49MTswIT09dDt0Pj49MSluPUpTQkkubXVsdGlwbHkobixuKSwwIT0oMSZ0KSYmKG51bGw9PT1lP2U9bjplPUpTQkkubXVsdGlwbHkoZSxuKSk7cmV0dXJuIGV9c3RhdGljIG11bHRpcGx5KF8sdCl7aWYoMD09PV8ubGVuZ3RoKXJldHVybiBfO2lmKDA9PT10Lmxlbmd0aClyZXR1cm4gdDtsZXQgaT1fLmxlbmd0aCt0Lmxlbmd0aDszMDw9Xy5fX2Nsem1zZCgpK3QuX19jbHptc2QoKSYmaS0tO2NvbnN0IGU9bmV3IEpTQkkoaSxfLnNpZ24hPT10LnNpZ24pO2UuX19pbml0aWFsaXplRGlnaXRzKCk7Zm9yKGxldCBuPTA7bjxfLmxlbmd0aDtuKyspSlNCSS5fX211bHRpcGx5QWNjdW11bGF0ZSh0LF8uX19kaWdpdChuKSxlLG4pO3JldHVybiBlLl9fdHJpbSgpfXN0YXRpYyBkaXZpZGUoaSxfKXtpZigwPT09Xy5sZW5ndGgpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJEaXZpc2lvbiBieSB6ZXJvXCIpO2lmKDA+SlNCSS5fX2Fic29sdXRlQ29tcGFyZShpLF8pKXJldHVybiBKU0JJLl9femVybygpO2NvbnN0IHQ9aS5zaWduIT09Xy5zaWduLGU9Xy5fX3Vuc2lnbmVkRGlnaXQoMCk7bGV0IG47aWYoMT09PV8ubGVuZ3RoJiYzMjc2Nz49ZSl7aWYoMT09PWUpcmV0dXJuIHQ9PT1pLnNpZ24/aTpKU0JJLnVuYXJ5TWludXMoaSk7bj1KU0JJLl9fYWJzb2x1dGVEaXZTbWFsbChpLGUsbnVsbCl9ZWxzZSBuPUpTQkkuX19hYnNvbHV0ZURpdkxhcmdlKGksXywhMCwhMSk7cmV0dXJuIG4uc2lnbj10LG4uX190cmltKCl9c3RhdGljIHJlbWFpbmRlcihpLF8pe2lmKDA9PT1fLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkRpdmlzaW9uIGJ5IHplcm9cIik7aWYoMD5KU0JJLl9fYWJzb2x1dGVDb21wYXJlKGksXykpcmV0dXJuIGk7Y29uc3QgdD1fLl9fdW5zaWduZWREaWdpdCgwKTtpZigxPT09Xy5sZW5ndGgmJjMyNzY3Pj10KXtpZigxPT09dClyZXR1cm4gSlNCSS5fX3plcm8oKTtjb25zdCBfPUpTQkkuX19hYnNvbHV0ZU1vZFNtYWxsKGksdCk7cmV0dXJuIDA9PT1fP0pTQkkuX196ZXJvKCk6SlNCSS5fX29uZURpZ2l0KF8saS5zaWduKX1jb25zdCBlPUpTQkkuX19hYnNvbHV0ZURpdkxhcmdlKGksXywhMSwhMCk7cmV0dXJuIGUuc2lnbj1pLnNpZ24sZS5fX3RyaW0oKX1zdGF0aWMgYWRkKGksXyl7Y29uc3QgdD1pLnNpZ247cmV0dXJuIHQ9PT1fLnNpZ24/SlNCSS5fX2Fic29sdXRlQWRkKGksXyx0KTowPD1KU0JJLl9fYWJzb2x1dGVDb21wYXJlKGksXyk/SlNCSS5fX2Fic29sdXRlU3ViKGksXyx0KTpKU0JJLl9fYWJzb2x1dGVTdWIoXyxpLCF0KX1zdGF0aWMgc3VidHJhY3QoaSxfKXtjb25zdCB0PWkuc2lnbjtyZXR1cm4gdD09PV8uc2lnbj8wPD1KU0JJLl9fYWJzb2x1dGVDb21wYXJlKGksXyk/SlNCSS5fX2Fic29sdXRlU3ViKGksXyx0KTpKU0JJLl9fYWJzb2x1dGVTdWIoXyxpLCF0KTpKU0JJLl9fYWJzb2x1dGVBZGQoaSxfLHQpfXN0YXRpYyBsZWZ0U2hpZnQoaSxfKXtyZXR1cm4gMD09PV8ubGVuZ3RofHwwPT09aS5sZW5ndGg/aTpfLnNpZ24/SlNCSS5fX3JpZ2h0U2hpZnRCeUFic29sdXRlKGksXyk6SlNCSS5fX2xlZnRTaGlmdEJ5QWJzb2x1dGUoaSxfKX1zdGF0aWMgc2lnbmVkUmlnaHRTaGlmdChpLF8pe3JldHVybiAwPT09Xy5sZW5ndGh8fDA9PT1pLmxlbmd0aD9pOl8uc2lnbj9KU0JJLl9fbGVmdFNoaWZ0QnlBYnNvbHV0ZShpLF8pOkpTQkkuX19yaWdodFNoaWZ0QnlBYnNvbHV0ZShpLF8pfXN0YXRpYyB1bnNpZ25lZFJpZ2h0U2hpZnQoKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQmlnSW50cyBoYXZlIG5vIHVuc2lnbmVkIHJpZ2h0IHNoaWZ0OyB1c2UgPj4gaW5zdGVhZFwiKX1zdGF0aWMgbGVzc1RoYW4oaSxfKXtyZXR1cm4gMD5KU0JJLl9fY29tcGFyZVRvQmlnSW50KGksXyl9c3RhdGljIGxlc3NUaGFuT3JFcXVhbChpLF8pe3JldHVybiAwPj1KU0JJLl9fY29tcGFyZVRvQmlnSW50KGksXyl9c3RhdGljIGdyZWF0ZXJUaGFuKGksXyl7cmV0dXJuIDA8SlNCSS5fX2NvbXBhcmVUb0JpZ0ludChpLF8pfXN0YXRpYyBncmVhdGVyVGhhbk9yRXF1YWwoaSxfKXtyZXR1cm4gMDw9SlNCSS5fX2NvbXBhcmVUb0JpZ0ludChpLF8pfXN0YXRpYyBlcXVhbChfLHQpe2lmKF8uc2lnbiE9PXQuc2lnbilyZXR1cm4hMTtpZihfLmxlbmd0aCE9PXQubGVuZ3RoKXJldHVybiExO2ZvcihsZXQgZT0wO2U8Xy5sZW5ndGg7ZSsrKWlmKF8uX19kaWdpdChlKSE9PXQuX19kaWdpdChlKSlyZXR1cm4hMTtyZXR1cm4hMH1zdGF0aWMgbm90RXF1YWwoaSxfKXtyZXR1cm4hSlNCSS5lcXVhbChpLF8pfXN0YXRpYyBiaXR3aXNlQW5kKGksXyl7dmFyIHQ9TWF0aC5tYXg7aWYoIWkuc2lnbiYmIV8uc2lnbilyZXR1cm4gSlNCSS5fX2Fic29sdXRlQW5kKGksXykuX190cmltKCk7aWYoaS5zaWduJiZfLnNpZ24pe2NvbnN0IGU9dChpLmxlbmd0aCxfLmxlbmd0aCkrMTtsZXQgbj1KU0JJLl9fYWJzb2x1dGVTdWJPbmUoaSxlKTtjb25zdCBnPUpTQkkuX19hYnNvbHV0ZVN1Yk9uZShfKTtyZXR1cm4gbj1KU0JJLl9fYWJzb2x1dGVPcihuLGcsbiksSlNCSS5fX2Fic29sdXRlQWRkT25lKG4sITAsbikuX190cmltKCl9cmV0dXJuIGkuc2lnbiYmKFtpLF9dPVtfLGldKSxKU0JJLl9fYWJzb2x1dGVBbmROb3QoaSxKU0JJLl9fYWJzb2x1dGVTdWJPbmUoXykpLl9fdHJpbSgpfXN0YXRpYyBiaXR3aXNlWG9yKGksXyl7dmFyIHQ9TWF0aC5tYXg7aWYoIWkuc2lnbiYmIV8uc2lnbilyZXR1cm4gSlNCSS5fX2Fic29sdXRlWG9yKGksXykuX190cmltKCk7aWYoaS5zaWduJiZfLnNpZ24pe2NvbnN0IGU9dChpLmxlbmd0aCxfLmxlbmd0aCksbj1KU0JJLl9fYWJzb2x1dGVTdWJPbmUoaSxlKSxnPUpTQkkuX19hYnNvbHV0ZVN1Yk9uZShfKTtyZXR1cm4gSlNCSS5fX2Fic29sdXRlWG9yKG4sZyxuKS5fX3RyaW0oKX1jb25zdCBlPXQoaS5sZW5ndGgsXy5sZW5ndGgpKzE7aS5zaWduJiYoW2ksX109W18saV0pO2xldCBuPUpTQkkuX19hYnNvbHV0ZVN1Yk9uZShfLGUpO3JldHVybiBuPUpTQkkuX19hYnNvbHV0ZVhvcihuLGksbiksSlNCSS5fX2Fic29sdXRlQWRkT25lKG4sITAsbikuX190cmltKCl9c3RhdGljIGJpdHdpc2VPcihpLF8pe3ZhciB0PU1hdGgubWF4O2NvbnN0IGU9dChpLmxlbmd0aCxfLmxlbmd0aCk7aWYoIWkuc2lnbiYmIV8uc2lnbilyZXR1cm4gSlNCSS5fX2Fic29sdXRlT3IoaSxfKS5fX3RyaW0oKTtpZihpLnNpZ24mJl8uc2lnbil7bGV0IHQ9SlNCSS5fX2Fic29sdXRlU3ViT25lKGksZSk7Y29uc3Qgbj1KU0JJLl9fYWJzb2x1dGVTdWJPbmUoXyk7cmV0dXJuIHQ9SlNCSS5fX2Fic29sdXRlQW5kKHQsbix0KSxKU0JJLl9fYWJzb2x1dGVBZGRPbmUodCwhMCx0KS5fX3RyaW0oKX1pLnNpZ24mJihbaSxfXT1bXyxpXSk7bGV0IG49SlNCSS5fX2Fic29sdXRlU3ViT25lKF8sZSk7cmV0dXJuIG49SlNCSS5fX2Fic29sdXRlQW5kTm90KG4saSxuKSxKU0JJLl9fYWJzb2x1dGVBZGRPbmUobiwhMCxuKS5fX3RyaW0oKX1zdGF0aWMgYXNJbnROKF8sdCl7dmFyIGk9TWF0aC5mbG9vcjtpZigwPT09dC5sZW5ndGgpcmV0dXJuIHQ7aWYoXz1pKF8pLDA+Xyl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgdmFsdWU6IG5vdCAoY29udmVydGlibGUgdG8pIGEgc2FmZSBpbnRlZ2VyXCIpO2lmKDA9PT1fKXJldHVybiBKU0JJLl9femVybygpO2lmKF8+PUpTQkkuX19rTWF4TGVuZ3RoQml0cylyZXR1cm4gdDtjb25zdCBlPTB8KF8rMjkpLzMwO2lmKHQubGVuZ3RoPGUpcmV0dXJuIHQ7Y29uc3QgZz10Ll9fdW5zaWduZWREaWdpdChlLTEpLHM9MTw8KF8tMSklMzA7aWYodC5sZW5ndGg9PT1lJiZnPHMpcmV0dXJuIHQ7aWYoISgoZyZzKT09PXMpKXJldHVybiBKU0JJLl9fdHJ1bmNhdGVUb05CaXRzKF8sdCk7aWYoIXQuc2lnbilyZXR1cm4gSlNCSS5fX3RydW5jYXRlQW5kU3ViRnJvbVBvd2VyT2ZUd28oXyx0LCEwKTtpZigwPT0oZyZzLTEpKXtmb3IobGV0IG49ZS0yOzA8PW47bi0tKWlmKDAhPT10Ll9fZGlnaXQobikpcmV0dXJuIEpTQkkuX190cnVuY2F0ZUFuZFN1YkZyb21Qb3dlck9mVHdvKF8sdCwhMSk7cmV0dXJuIHQubGVuZ3RoPT09ZSYmZz09PXM/dDpKU0JJLl9fdHJ1bmNhdGVUb05CaXRzKF8sdCl9cmV0dXJuIEpTQkkuX190cnVuY2F0ZUFuZFN1YkZyb21Qb3dlck9mVHdvKF8sdCwhMSl9c3RhdGljIGFzVWludE4oaSxfKXt2YXIgdD1NYXRoLmZsb29yO2lmKDA9PT1fLmxlbmd0aClyZXR1cm4gXztpZihpPXQoaSksMD5pKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCB2YWx1ZTogbm90IChjb252ZXJ0aWJsZSB0bykgYSBzYWZlIGludGVnZXJcIik7aWYoMD09PWkpcmV0dXJuIEpTQkkuX196ZXJvKCk7aWYoXy5zaWduKXtpZihpPkpTQkkuX19rTWF4TGVuZ3RoQml0cyl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkJpZ0ludCB0b28gYmlnXCIpO3JldHVybiBKU0JJLl9fdHJ1bmNhdGVBbmRTdWJGcm9tUG93ZXJPZlR3byhpLF8sITEpfWlmKGk+PUpTQkkuX19rTWF4TGVuZ3RoQml0cylyZXR1cm4gXztjb25zdCBlPTB8KGkrMjkpLzMwO2lmKF8ubGVuZ3RoPGUpcmV0dXJuIF87Y29uc3QgZz1pJTMwO2lmKF8ubGVuZ3RoPT1lKXtpZigwPT09ZylyZXR1cm4gXztjb25zdCBpPV8uX19kaWdpdChlLTEpO2lmKDA9PWk+Pj5nKXJldHVybiBffXJldHVybiBKU0JJLl9fdHJ1bmNhdGVUb05CaXRzKGksXyl9c3RhdGljIEFERChpLF8pe2lmKGk9SlNCSS5fX3RvUHJpbWl0aXZlKGkpLF89SlNCSS5fX3RvUHJpbWl0aXZlKF8pLFwic3RyaW5nXCI9PXR5cGVvZiBpKXJldHVyblwic3RyaW5nXCIhPXR5cGVvZiBfJiYoXz1fLnRvU3RyaW5nKCkpLGkrXztpZihcInN0cmluZ1wiPT10eXBlb2YgXylyZXR1cm4gaS50b1N0cmluZygpK187aWYoaT1KU0JJLl9fdG9OdW1lcmljKGkpLF89SlNCSS5fX3RvTnVtZXJpYyhfKSxKU0JJLl9faXNCaWdJbnQoaSkmJkpTQkkuX19pc0JpZ0ludChfKSlyZXR1cm4gSlNCSS5hZGQoaSxfKTtpZihcIm51bWJlclwiPT10eXBlb2YgaSYmXCJudW1iZXJcIj09dHlwZW9mIF8pcmV0dXJuIGkrXzt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IG1peCBCaWdJbnQgYW5kIG90aGVyIHR5cGVzLCB1c2UgZXhwbGljaXQgY29udmVyc2lvbnNcIil9c3RhdGljIExUKGksXyl7cmV0dXJuIEpTQkkuX19jb21wYXJlKGksXywwKX1zdGF0aWMgTEUoaSxfKXtyZXR1cm4gSlNCSS5fX2NvbXBhcmUoaSxfLDEpfXN0YXRpYyBHVChpLF8pe3JldHVybiBKU0JJLl9fY29tcGFyZShpLF8sMil9c3RhdGljIEdFKGksXyl7cmV0dXJuIEpTQkkuX19jb21wYXJlKGksXywzKX1zdGF0aWMgRVEoaSxfKXtmb3IoOzspe2lmKEpTQkkuX19pc0JpZ0ludChpKSlyZXR1cm4gSlNCSS5fX2lzQmlnSW50KF8pP0pTQkkuZXF1YWwoaSxfKTpKU0JJLkVRKF8saSk7aWYoXCJudW1iZXJcIj09dHlwZW9mIGkpe2lmKEpTQkkuX19pc0JpZ0ludChfKSlyZXR1cm4gSlNCSS5fX2VxdWFsVG9OdW1iZXIoXyxpKTtpZihcIm9iamVjdFwiIT10eXBlb2YgXylyZXR1cm4gaT09XztfPUpTQkkuX190b1ByaW1pdGl2ZShfKX1lbHNlIGlmKFwic3RyaW5nXCI9PXR5cGVvZiBpKXtpZihKU0JJLl9faXNCaWdJbnQoXykpcmV0dXJuIGk9SlNCSS5fX2Zyb21TdHJpbmcoaSksbnVsbCE9PWkmJkpTQkkuZXF1YWwoaSxfKTtpZihcIm9iamVjdFwiIT10eXBlb2YgXylyZXR1cm4gaT09XztfPUpTQkkuX190b1ByaW1pdGl2ZShfKX1lbHNlIGlmKFwiYm9vbGVhblwiPT10eXBlb2YgaSl7aWYoSlNCSS5fX2lzQmlnSW50KF8pKXJldHVybiBKU0JJLl9fZXF1YWxUb051bWJlcihfLCtpKTtpZihcIm9iamVjdFwiIT10eXBlb2YgXylyZXR1cm4gaT09XztfPUpTQkkuX190b1ByaW1pdGl2ZShfKX1lbHNlIGlmKFwic3ltYm9sXCI9PXR5cGVvZiBpKXtpZihKU0JJLl9faXNCaWdJbnQoXykpcmV0dXJuITE7aWYoXCJvYmplY3RcIiE9dHlwZW9mIF8pcmV0dXJuIGk9PV87Xz1KU0JJLl9fdG9QcmltaXRpdmUoXyl9ZWxzZSBpZihcIm9iamVjdFwiPT10eXBlb2YgaSl7aWYoXCJvYmplY3RcIj09dHlwZW9mIF8mJl8uY29uc3RydWN0b3IhPT1KU0JJKXJldHVybiBpPT1fO2k9SlNCSS5fX3RvUHJpbWl0aXZlKGkpfWVsc2UgcmV0dXJuIGk9PV99fXN0YXRpYyBORShpLF8pe3JldHVybiFKU0JJLkVRKGksXyl9c3RhdGljIERhdGFWaWV3R2V0QmlnSW50NjQoaSxfLHQ9ITEpe3JldHVybiBKU0JJLmFzSW50Tig2NCxKU0JJLkRhdGFWaWV3R2V0QmlnVWludDY0KGksXyx0KSl9c3RhdGljIERhdGFWaWV3R2V0QmlnVWludDY0KGksXyx0PSExKXtjb25zdFtlLG5dPXQ/WzQsMF06WzAsNF0sZz1pLmdldFVpbnQzMihfK2UsdCkscz1pLmdldFVpbnQzMihfK24sdCksbz1uZXcgSlNCSSgzLCExKTtyZXR1cm4gby5fX3NldERpZ2l0KDAsMTA3Mzc0MTgyMyZzKSxvLl9fc2V0RGlnaXQoMSwoMjY4NDM1NDU1JmcpPDwyfHM+Pj4zMCksby5fX3NldERpZ2l0KDIsZz4+PjI4KSxvLl9fdHJpbSgpfXN0YXRpYyBEYXRhVmlld1NldEJpZ0ludDY0KGksXyx0LGU9ITEpe0pTQkkuRGF0YVZpZXdTZXRCaWdVaW50NjQoaSxfLHQsZSl9c3RhdGljIERhdGFWaWV3U2V0QmlnVWludDY0KGksXyx0LGU9ITEpe3Q9SlNCSS5hc1VpbnROKDY0LHQpO2xldCBuPTAsZz0wO2lmKDA8dC5sZW5ndGgmJihnPXQuX19kaWdpdCgwKSwxPHQubGVuZ3RoKSl7Y29uc3QgaT10Ll9fZGlnaXQoMSk7Z3w9aTw8MzAsbj1pPj4+MiwyPHQubGVuZ3RoJiYobnw9dC5fX2RpZ2l0KDIpPDwyOCl9Y29uc3RbcyxvXT1lP1s0LDBdOlswLDRdO2kuc2V0VWludDMyKF8rcyxuLGUpLGkuc2V0VWludDMyKF8rbyxnLGUpfXN0YXRpYyBfX3plcm8oKXtyZXR1cm4gbmV3IEpTQkkoMCwhMSl9c3RhdGljIF9fb25lRGlnaXQoaSxfKXtjb25zdCB0PW5ldyBKU0JJKDEsXyk7cmV0dXJuIHQuX19zZXREaWdpdCgwLGkpLHR9X19jb3B5KCl7Y29uc3QgXz1uZXcgSlNCSSh0aGlzLmxlbmd0aCx0aGlzLnNpZ24pO2ZvcihsZXQgdD0wO3Q8dGhpcy5sZW5ndGg7dCsrKV9bdF09dGhpc1t0XTtyZXR1cm4gX31fX3RyaW0oKXtsZXQgaT10aGlzLmxlbmd0aCxfPXRoaXNbaS0xXTtmb3IoOzA9PT1fOylpLS0sXz10aGlzW2ktMV0sdGhpcy5wb3AoKTtyZXR1cm4gMD09PWkmJih0aGlzLnNpZ249ITEpLHRoaXN9X19pbml0aWFsaXplRGlnaXRzKCl7Zm9yKGxldCBfPTA7Xzx0aGlzLmxlbmd0aDtfKyspdGhpc1tfXT0wfXN0YXRpYyBfX2RlY2lkZVJvdW5kaW5nKGksXyx0LGUpe2lmKDA8XylyZXR1cm4tMTtsZXQgbjtpZigwPl8pbj0tXy0xO2Vsc2V7aWYoMD09PXQpcmV0dXJuLTE7dC0tLGU9aS5fX2RpZ2l0KHQpLG49Mjl9bGV0IGc9MTw8bjtpZigwPT0oZSZnKSlyZXR1cm4tMTtpZihnLT0xLDAhPShlJmcpKXJldHVybiAxO2Zvcig7MDx0OylpZih0LS0sMCE9PWkuX19kaWdpdCh0KSlyZXR1cm4gMTtyZXR1cm4gMH1zdGF0aWMgX19mcm9tRG91YmxlKGkpe0pTQkkuX19rQml0Q29udmVyc2lvbkRvdWJsZVswXT1pO2NvbnN0IF89MjA0NyZKU0JJLl9fa0JpdENvbnZlcnNpb25JbnRzWzFdPj4+MjAsdD1fLTEwMjMsZT0oMHx0LzMwKSsxLG49bmV3IEpTQkkoZSwwPmkpO2xldCBnPTEwNDg1NzUmSlNCSS5fX2tCaXRDb252ZXJzaW9uSW50c1sxXXwxMDQ4NTc2LHM9SlNCSS5fX2tCaXRDb252ZXJzaW9uSW50c1swXTtjb25zdCBvPTIwLGw9dCUzMDtsZXQgcixhPTA7aWYobDwyMCl7Y29uc3QgaT1vLWw7YT1pKzMyLHI9Zz4+PmksZz1nPDwzMi1pfHM+Pj5pLHM8PD0zMi1pfWVsc2UgaWYobD09PTIwKWE9MzIscj1nLGc9cyxzPTA7ZWxzZXtjb25zdCBpPWwtbzthPTMyLWkscj1nPDxpfHM+Pj4zMi1pLGc9czw8aSxzPTB9bi5fX3NldERpZ2l0KGUtMSxyKTtmb3IobGV0IF89ZS0yOzA8PV87Xy0tKTA8YT8oYS09MzAscj1nPj4+MixnPWc8PDMwfHM+Pj4yLHM8PD0zMCk6cj0wLG4uX19zZXREaWdpdChfLHIpO3JldHVybiBuLl9fdHJpbSgpfXN0YXRpYyBfX2lzV2hpdGVzcGFjZShpKXtyZXR1cm4hISgxMz49aSYmOTw9aSl8fCgxNTk+PWk/MzI9PWk6MTMxMDcxPj1pPzE2MD09aXx8NTc2MD09aToxOTY2MDc+PWk/KGkmPTEzMTA3MSwxMD49aXx8NDA9PWl8fDQxPT1pfHw0Nz09aXx8OTU9PWl8fDQwOTY9PWkpOjY1Mjc5PT1pKX1zdGF0aWMgX19mcm9tU3RyaW5nKGksXz0wKXtsZXQgdD0wO2NvbnN0IGU9aS5sZW5ndGg7bGV0IG49MDtpZihuPT09ZSlyZXR1cm4gSlNCSS5fX3plcm8oKTtsZXQgZz1pLmNoYXJDb2RlQXQobik7Zm9yKDtKU0JJLl9faXNXaGl0ZXNwYWNlKGcpOyl7aWYoKytuPT09ZSlyZXR1cm4gSlNCSS5fX3plcm8oKTtnPWkuY2hhckNvZGVBdChuKX1pZig0Mz09PWcpe2lmKCsrbj09PWUpcmV0dXJuIG51bGw7Zz1pLmNoYXJDb2RlQXQobiksdD0xfWVsc2UgaWYoNDU9PT1nKXtpZigrK249PT1lKXJldHVybiBudWxsO2c9aS5jaGFyQ29kZUF0KG4pLHQ9LTF9aWYoMD09PV8pe2lmKF89MTAsNDg9PT1nKXtpZigrK249PT1lKXJldHVybiBKU0JJLl9femVybygpO2lmKGc9aS5jaGFyQ29kZUF0KG4pLDg4PT09Z3x8MTIwPT09Zyl7aWYoXz0xNiwrK249PT1lKXJldHVybiBudWxsO2c9aS5jaGFyQ29kZUF0KG4pfWVsc2UgaWYoNzk9PT1nfHwxMTE9PT1nKXtpZihfPTgsKytuPT09ZSlyZXR1cm4gbnVsbDtnPWkuY2hhckNvZGVBdChuKX1lbHNlIGlmKDY2PT09Z3x8OTg9PT1nKXtpZihfPTIsKytuPT09ZSlyZXR1cm4gbnVsbDtnPWkuY2hhckNvZGVBdChuKX19fWVsc2UgaWYoMTY9PT1fJiY0OD09PWcpe2lmKCsrbj09PWUpcmV0dXJuIEpTQkkuX196ZXJvKCk7aWYoZz1pLmNoYXJDb2RlQXQobiksODg9PT1nfHwxMjA9PT1nKXtpZigrK249PT1lKXJldHVybiBudWxsO2c9aS5jaGFyQ29kZUF0KG4pfX1pZigwIT10JiYxMCE9PV8pcmV0dXJuIG51bGw7Zm9yKDs0OD09PWc7KXtpZigrK249PT1lKXJldHVybiBKU0JJLl9femVybygpO2c9aS5jaGFyQ29kZUF0KG4pfWNvbnN0IHM9ZS1uO2xldCBvPUpTQkkuX19rTWF4Qml0c1BlckNoYXJbX10sbD1KU0JJLl9fa0JpdHNQZXJDaGFyVGFibGVNdWx0aXBsaWVyLTE7aWYocz4xMDczNzQxODI0L28pcmV0dXJuIG51bGw7Y29uc3Qgcj1vKnMrbD4+PkpTQkkuX19rQml0c1BlckNoYXJUYWJsZVNoaWZ0LGE9bmV3IEpTQkkoMHwocisyOSkvMzAsITEpLHU9MTA+Xz9fOjEwLGg9MTA8Xz9fLTEwOjA7aWYoMD09KF8mXy0xKSl7bz4+PUpTQkkuX19rQml0c1BlckNoYXJUYWJsZVNoaWZ0O2NvbnN0IF89W10sdD1bXTtsZXQgcz0hMTtkb3tsZXQgbD0wLHI9MDtmb3IoOzspe2xldCBfO2lmKGctNDg+Pj4wPHUpXz1nLTQ4O2Vsc2UgaWYoKDMyfGcpLTk3Pj4+MDxoKV89KDMyfGcpLTg3O2Vsc2V7cz0hMDticmVha31pZihyKz1vLGw9bDw8b3xfLCsrbj09PWUpe3M9ITA7YnJlYWt9aWYoZz1pLmNoYXJDb2RlQXQobiksMzA8citvKWJyZWFrfV8ucHVzaChsKSx0LnB1c2gocil9d2hpbGUoIXMpO0pTQkkuX19maWxsRnJvbVBhcnRzKGEsXyx0KX1lbHNle2EuX19pbml0aWFsaXplRGlnaXRzKCk7bGV0IHQ9ITEscz0wO2Rve2xldCByPTAsYj0xO2Zvcig7Oyl7bGV0IG87aWYoZy00OD4+PjA8dSlvPWctNDg7ZWxzZSBpZigoMzJ8ZyktOTc+Pj4wPGgpbz0oMzJ8ZyktODc7ZWxzZXt0PSEwO2JyZWFrfWNvbnN0IGw9YipfO2lmKDEwNzM3NDE4MjM8bClicmVhaztpZihiPWwscj1yKl8rbyxzKyssKytuPT09ZSl7dD0hMDticmVha31nPWkuY2hhckNvZGVBdChuKX1sPTMwKkpTQkkuX19rQml0c1BlckNoYXJUYWJsZU11bHRpcGxpZXItMTtjb25zdCBEPTB8KG8qcytsPj4+SlNCSS5fX2tCaXRzUGVyQ2hhclRhYmxlU2hpZnQpLzMwO2EuX19pbnBsYWNlTXVsdGlwbHlBZGQoYixyLEQpfXdoaWxlKCF0KX1pZihuIT09ZSl7aWYoIUpTQkkuX19pc1doaXRlc3BhY2UoZykpcmV0dXJuIG51bGw7Zm9yKG4rKztuPGU7bisrKWlmKGc9aS5jaGFyQ29kZUF0KG4pLCFKU0JJLl9faXNXaGl0ZXNwYWNlKGcpKXJldHVybiBudWxsfXJldHVybiBhLnNpZ249LTE9PXQsYS5fX3RyaW0oKX1zdGF0aWMgX19maWxsRnJvbVBhcnRzKF8sdCxlKXtsZXQgbj0wLGc9MCxzPTA7Zm9yKGxldCBvPXQubGVuZ3RoLTE7MDw9bztvLS0pe2NvbnN0IGk9dFtvXSxsPWVbb107Z3w9aTw8cyxzKz1sLDMwPT09cz8oXy5fX3NldERpZ2l0KG4rKyxnKSxzPTAsZz0wKTozMDxzJiYoXy5fX3NldERpZ2l0KG4rKywxMDczNzQxODIzJmcpLHMtPTMwLGc9aT4+Pmwtcyl9aWYoMCE9PWcpe2lmKG4+PV8ubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcImltcGxlbWVudGF0aW9uIGJ1Z1wiKTtfLl9fc2V0RGlnaXQobisrLGcpfWZvcig7bjxfLmxlbmd0aDtuKyspXy5fX3NldERpZ2l0KG4sMCl9c3RhdGljIF9fdG9TdHJpbmdCYXNlUG93ZXJPZlR3byhfLGkpe2NvbnN0IHQ9Xy5sZW5ndGg7bGV0IGU9aS0xO2U9KDg1JmU+Pj4xKSsoODUmZSksZT0oNTEmZT4+PjIpKyg1MSZlKSxlPSgxNSZlPj4+NCkrKDE1JmUpO2NvbnN0IG49ZSxnPWktMSxzPV8uX19kaWdpdCh0LTEpLG89SlNCSS5fX2NsejMwKHMpO2xldCBsPTB8KDMwKnQtbytuLTEpL247aWYoXy5zaWduJiZsKyssMjY4NDM1NDU2PGwpdGhyb3cgbmV3IEVycm9yKFwic3RyaW5nIHRvbyBsb25nXCIpO2NvbnN0IHI9QXJyYXkobCk7bGV0IGE9bC0xLHU9MCxkPTA7Zm9yKGxldCBlPTA7ZTx0LTE7ZSsrKXtjb25zdCBpPV8uX19kaWdpdChlKSx0PSh1fGk8PGQpJmc7clthLS1dPUpTQkkuX19rQ29udmVyc2lvbkNoYXJzW3RdO2NvbnN0IHM9bi1kO2Zvcih1PWk+Pj5zLGQ9MzAtcztkPj1uOylyW2EtLV09SlNCSS5fX2tDb252ZXJzaW9uQ2hhcnNbdSZnXSx1Pj4+PW4sZC09bn1jb25zdCBoPSh1fHM8PGQpJmc7Zm9yKHJbYS0tXT1KU0JJLl9fa0NvbnZlcnNpb25DaGFyc1toXSx1PXM+Pj5uLWQ7MCE9PXU7KXJbYS0tXT1KU0JJLl9fa0NvbnZlcnNpb25DaGFyc1t1JmddLHU+Pj49bjtpZihfLnNpZ24mJihyW2EtLV09XCItXCIpLC0xIT1hKXRocm93IG5ldyBFcnJvcihcImltcGxlbWVudGF0aW9uIGJ1Z1wiKTtyZXR1cm4gci5qb2luKFwiXCIpfXN0YXRpYyBfX3RvU3RyaW5nR2VuZXJpYyhfLGksdCl7Y29uc3QgZT1fLmxlbmd0aDtpZigwPT09ZSlyZXR1cm5cIlwiO2lmKDE9PT1lKXtsZXQgZT1fLl9fdW5zaWduZWREaWdpdCgwKS50b1N0cmluZyhpKTtyZXR1cm4hMT09PXQmJl8uc2lnbiYmKGU9XCItXCIrZSksZX1jb25zdCBuPTMwKmUtSlNCSS5fX2NsejMwKF8uX19kaWdpdChlLTEpKSxnPUpTQkkuX19rTWF4Qml0c1BlckNoYXJbaV0scz1nLTE7bGV0IG89bipKU0JJLl9fa0JpdHNQZXJDaGFyVGFibGVNdWx0aXBsaWVyO28rPXMtMSxvPTB8by9zO2NvbnN0IGw9bysxPj4xLHI9SlNCSS5leHBvbmVudGlhdGUoSlNCSS5fX29uZURpZ2l0KGksITEpLEpTQkkuX19vbmVEaWdpdChsLCExKSk7bGV0IGEsdTtjb25zdCBkPXIuX191bnNpZ25lZERpZ2l0KDApO2lmKDE9PT1yLmxlbmd0aCYmMzI3Njc+PWQpe2E9bmV3IEpTQkkoXy5sZW5ndGgsITEpLGEuX19pbml0aWFsaXplRGlnaXRzKCk7bGV0IHQ9MDtmb3IobGV0IGU9MipfLmxlbmd0aC0xOzA8PWU7ZS0tKXtjb25zdCBpPXQ8PDE1fF8uX19oYWxmRGlnaXQoZSk7YS5fX3NldEhhbGZEaWdpdChlLDB8aS9kKSx0PTB8aSVkfXU9dC50b1N0cmluZyhpKX1lbHNle2NvbnN0IHQ9SlNCSS5fX2Fic29sdXRlRGl2TGFyZ2UoXyxyLCEwLCEwKTthPXQucXVvdGllbnQ7Y29uc3QgZT10LnJlbWFpbmRlci5fX3RyaW0oKTt1PUpTQkkuX190b1N0cmluZ0dlbmVyaWMoZSxpLCEwKX1hLl9fdHJpbSgpO2xldCBoPUpTQkkuX190b1N0cmluZ0dlbmVyaWMoYSxpLCEwKTtmb3IoO3UubGVuZ3RoPGw7KXU9XCIwXCIrdTtyZXR1cm4hMT09PXQmJl8uc2lnbiYmKGg9XCItXCIraCksaCt1fXN0YXRpYyBfX3VuZXF1YWxTaWduKGkpe3JldHVybiBpPy0xOjF9c3RhdGljIF9fYWJzb2x1dGVHcmVhdGVyKGkpe3JldHVybiBpPy0xOjF9c3RhdGljIF9fYWJzb2x1dGVMZXNzKGkpe3JldHVybiBpPzE6LTF9c3RhdGljIF9fY29tcGFyZVRvQmlnSW50KGksXyl7Y29uc3QgdD1pLnNpZ247aWYodCE9PV8uc2lnbilyZXR1cm4gSlNCSS5fX3VuZXF1YWxTaWduKHQpO2NvbnN0IGU9SlNCSS5fX2Fic29sdXRlQ29tcGFyZShpLF8pO3JldHVybiAwPGU/SlNCSS5fX2Fic29sdXRlR3JlYXRlcih0KTowPmU/SlNCSS5fX2Fic29sdXRlTGVzcyh0KTowfXN0YXRpYyBfX2NvbXBhcmVUb051bWJlcihpLF8pe2lmKEpTQkkuX19pc09uZURpZ2l0SW50KF8pKXtjb25zdCB0PWkuc2lnbixlPTA+XztpZih0IT09ZSlyZXR1cm4gSlNCSS5fX3VuZXF1YWxTaWduKHQpO2lmKDA9PT1pLmxlbmd0aCl7aWYoZSl0aHJvdyBuZXcgRXJyb3IoXCJpbXBsZW1lbnRhdGlvbiBidWdcIik7cmV0dXJuIDA9PT1fPzA6LTF9aWYoMTxpLmxlbmd0aClyZXR1cm4gSlNCSS5fX2Fic29sdXRlR3JlYXRlcih0KTtjb25zdCBuPU1hdGguYWJzKF8pLGc9aS5fX3Vuc2lnbmVkRGlnaXQoMCk7cmV0dXJuIGc+bj9KU0JJLl9fYWJzb2x1dGVHcmVhdGVyKHQpOmc8bj9KU0JJLl9fYWJzb2x1dGVMZXNzKHQpOjB9cmV0dXJuIEpTQkkuX19jb21wYXJlVG9Eb3VibGUoaSxfKX1zdGF0aWMgX19jb21wYXJlVG9Eb3VibGUoaSxfKXtpZihfIT09XylyZXR1cm4gXztpZihfPT09MS8wKXJldHVybi0xO2lmKF89PT0tSW5maW5pdHkpcmV0dXJuIDE7Y29uc3QgdD1pLnNpZ247aWYodCE9PTA+XylyZXR1cm4gSlNCSS5fX3VuZXF1YWxTaWduKHQpO2lmKDA9PT1fKXRocm93IG5ldyBFcnJvcihcImltcGxlbWVudGF0aW9uIGJ1Zzogc2hvdWxkIGJlIGhhbmRsZWQgZWxzZXdoZXJlXCIpO2lmKDA9PT1pLmxlbmd0aClyZXR1cm4tMTtKU0JJLl9fa0JpdENvbnZlcnNpb25Eb3VibGVbMF09Xztjb25zdCBlPTIwNDcmSlNCSS5fX2tCaXRDb252ZXJzaW9uSW50c1sxXT4+PjIwO2lmKDIwNDc9PWUpdGhyb3cgbmV3IEVycm9yKFwiaW1wbGVtZW50YXRpb24gYnVnOiBoYW5kbGVkIGVsc2V3aGVyZVwiKTtjb25zdCBuPWUtMTAyMztpZigwPm4pcmV0dXJuIEpTQkkuX19hYnNvbHV0ZUdyZWF0ZXIodCk7Y29uc3QgZz1pLmxlbmd0aDtsZXQgcz1pLl9fZGlnaXQoZy0xKTtjb25zdCBvPUpTQkkuX19jbHozMChzKSxsPTMwKmctbyxyPW4rMTtpZihsPHIpcmV0dXJuIEpTQkkuX19hYnNvbHV0ZUxlc3ModCk7aWYobD5yKXJldHVybiBKU0JJLl9fYWJzb2x1dGVHcmVhdGVyKHQpO2xldCBhPTEwNDg1NzZ8MTA0ODU3NSZKU0JJLl9fa0JpdENvbnZlcnNpb25JbnRzWzFdLHU9SlNCSS5fX2tCaXRDb252ZXJzaW9uSW50c1swXTtjb25zdCBkPTIwLGg9MjktbztpZihoIT09KDB8KGwtMSklMzApKXRocm93IG5ldyBFcnJvcihcImltcGxlbWVudGF0aW9uIGJ1Z1wiKTtsZXQgbSxiPTA7aWYoMjA+aCl7Y29uc3QgaT1kLWg7Yj1pKzMyLG09YT4+PmksYT1hPDwzMi1pfHU+Pj5pLHU8PD0zMi1pfWVsc2UgaWYoMjA9PT1oKWI9MzIsbT1hLGE9dSx1PTA7ZWxzZXtjb25zdCBpPWgtZDtiPTMyLWksbT1hPDxpfHU+Pj4zMi1pLGE9dTw8aSx1PTB9aWYocz4+Pj0wLG0+Pj49MCxzPm0pcmV0dXJuIEpTQkkuX19hYnNvbHV0ZUdyZWF0ZXIodCk7aWYoczxtKXJldHVybiBKU0JJLl9fYWJzb2x1dGVMZXNzKHQpO2ZvcihsZXQgZT1nLTI7MDw9ZTtlLS0pezA8Yj8oYi09MzAsbT1hPj4+MixhPWE8PDMwfHU+Pj4yLHU8PD0zMCk6bT0wO2NvbnN0IF89aS5fX3Vuc2lnbmVkRGlnaXQoZSk7aWYoXz5tKXJldHVybiBKU0JJLl9fYWJzb2x1dGVHcmVhdGVyKHQpO2lmKF88bSlyZXR1cm4gSlNCSS5fX2Fic29sdXRlTGVzcyh0KX1pZigwIT09YXx8MCE9PXUpe2lmKDA9PT1iKXRocm93IG5ldyBFcnJvcihcImltcGxlbWVudGF0aW9uIGJ1Z1wiKTtyZXR1cm4gSlNCSS5fX2Fic29sdXRlTGVzcyh0KX1yZXR1cm4gMH1zdGF0aWMgX19lcXVhbFRvTnVtYmVyKGksXyl7dmFyIHQ9TWF0aC5hYnM7cmV0dXJuIEpTQkkuX19pc09uZURpZ2l0SW50KF8pPzA9PT1fPzA9PT1pLmxlbmd0aDoxPT09aS5sZW5ndGgmJmkuc2lnbj09PTA+XyYmaS5fX3Vuc2lnbmVkRGlnaXQoMCk9PT10KF8pOjA9PT1KU0JJLl9fY29tcGFyZVRvRG91YmxlKGksXyl9c3RhdGljIF9fY29tcGFyaXNvblJlc3VsdFRvQm9vbChpLF8pe3JldHVybiAwPT09Xz8wPmk6MT09PV8/MD49aToyPT09Xz8wPGk6Mz09PV8/MDw9aTp2b2lkIDB9c3RhdGljIF9fY29tcGFyZShpLF8sdCl7aWYoaT1KU0JJLl9fdG9QcmltaXRpdmUoaSksXz1KU0JJLl9fdG9QcmltaXRpdmUoXyksXCJzdHJpbmdcIj09dHlwZW9mIGkmJlwic3RyaW5nXCI9PXR5cGVvZiBfKXN3aXRjaCh0KXtjYXNlIDA6cmV0dXJuIGk8XztjYXNlIDE6cmV0dXJuIGk8PV87Y2FzZSAyOnJldHVybiBpPl87Y2FzZSAzOnJldHVybiBpPj1fO31pZihKU0JJLl9faXNCaWdJbnQoaSkmJlwic3RyaW5nXCI9PXR5cGVvZiBfKXJldHVybiBfPUpTQkkuX19mcm9tU3RyaW5nKF8pLG51bGwhPT1fJiZKU0JJLl9fY29tcGFyaXNvblJlc3VsdFRvQm9vbChKU0JJLl9fY29tcGFyZVRvQmlnSW50KGksXyksdCk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGkmJkpTQkkuX19pc0JpZ0ludChfKSlyZXR1cm4gaT1KU0JJLl9fZnJvbVN0cmluZyhpKSxudWxsIT09aSYmSlNCSS5fX2NvbXBhcmlzb25SZXN1bHRUb0Jvb2woSlNCSS5fX2NvbXBhcmVUb0JpZ0ludChpLF8pLHQpO2lmKGk9SlNCSS5fX3RvTnVtZXJpYyhpKSxfPUpTQkkuX190b051bWVyaWMoXyksSlNCSS5fX2lzQmlnSW50KGkpKXtpZihKU0JJLl9faXNCaWdJbnQoXykpcmV0dXJuIEpTQkkuX19jb21wYXJpc29uUmVzdWx0VG9Cb29sKEpTQkkuX19jb21wYXJlVG9CaWdJbnQoaSxfKSx0KTtpZihcIm51bWJlclwiIT10eXBlb2YgXyl0aHJvdyBuZXcgRXJyb3IoXCJpbXBsZW1lbnRhdGlvbiBidWdcIik7cmV0dXJuIEpTQkkuX19jb21wYXJpc29uUmVzdWx0VG9Cb29sKEpTQkkuX19jb21wYXJlVG9OdW1iZXIoaSxfKSx0KX1pZihcIm51bWJlclwiIT10eXBlb2YgaSl0aHJvdyBuZXcgRXJyb3IoXCJpbXBsZW1lbnRhdGlvbiBidWdcIik7aWYoSlNCSS5fX2lzQmlnSW50KF8pKXJldHVybiBKU0JJLl9fY29tcGFyaXNvblJlc3VsdFRvQm9vbChKU0JJLl9fY29tcGFyZVRvTnVtYmVyKF8saSksMl50KTtpZihcIm51bWJlclwiIT10eXBlb2YgXyl0aHJvdyBuZXcgRXJyb3IoXCJpbXBsZW1lbnRhdGlvbiBidWdcIik7cmV0dXJuIDA9PT10P2k8XzoxPT09dD9pPD1fOjI9PT10P2k+XzozPT09dD9pPj1fOnZvaWQgMH1fX2Nsem1zZCgpe3JldHVybiBKU0JJLl9fY2x6MzAodGhpcy5fX2RpZ2l0KHRoaXMubGVuZ3RoLTEpKX1zdGF0aWMgX19hYnNvbHV0ZUFkZChfLHQsZSl7aWYoXy5sZW5ndGg8dC5sZW5ndGgpcmV0dXJuIEpTQkkuX19hYnNvbHV0ZUFkZCh0LF8sZSk7aWYoMD09PV8ubGVuZ3RoKXJldHVybiBfO2lmKDA9PT10Lmxlbmd0aClyZXR1cm4gXy5zaWduPT09ZT9fOkpTQkkudW5hcnlNaW51cyhfKTtsZXQgbj1fLmxlbmd0aDsoMD09PV8uX19jbHptc2QoKXx8dC5sZW5ndGg9PT1fLmxlbmd0aCYmMD09PXQuX19jbHptc2QoKSkmJm4rKztjb25zdCBnPW5ldyBKU0JJKG4sZSk7bGV0IHM9MCxvPTA7Zm9yKDtvPHQubGVuZ3RoO28rKyl7Y29uc3QgaT1fLl9fZGlnaXQobykrdC5fX2RpZ2l0KG8pK3M7cz1pPj4+MzAsZy5fX3NldERpZ2l0KG8sMTA3Mzc0MTgyMyZpKX1mb3IoO288Xy5sZW5ndGg7bysrKXtjb25zdCBpPV8uX19kaWdpdChvKStzO3M9aT4+PjMwLGcuX19zZXREaWdpdChvLDEwNzM3NDE4MjMmaSl9cmV0dXJuIG88Zy5sZW5ndGgmJmcuX19zZXREaWdpdChvLHMpLGcuX190cmltKCl9c3RhdGljIF9fYWJzb2x1dGVTdWIoXyx0LGUpe2lmKDA9PT1fLmxlbmd0aClyZXR1cm4gXztpZigwPT09dC5sZW5ndGgpcmV0dXJuIF8uc2lnbj09PWU/XzpKU0JJLnVuYXJ5TWludXMoXyk7Y29uc3Qgbj1uZXcgSlNCSShfLmxlbmd0aCxlKTtsZXQgZz0wLHM9MDtmb3IoO3M8dC5sZW5ndGg7cysrKXtjb25zdCBpPV8uX19kaWdpdChzKS10Ll9fZGlnaXQocyktZztnPTEmaT4+PjMwLG4uX19zZXREaWdpdChzLDEwNzM3NDE4MjMmaSl9Zm9yKDtzPF8ubGVuZ3RoO3MrKyl7Y29uc3QgaT1fLl9fZGlnaXQocyktZztnPTEmaT4+PjMwLG4uX19zZXREaWdpdChzLDEwNzM3NDE4MjMmaSl9cmV0dXJuIG4uX190cmltKCl9c3RhdGljIF9fYWJzb2x1dGVBZGRPbmUoXyxpLHQ9bnVsbCl7Y29uc3QgZT1fLmxlbmd0aDtudWxsPT09dD90PW5ldyBKU0JJKGUsaSk6dC5zaWduPWk7bGV0IG49MTtmb3IobGV0IGc9MDtnPGU7ZysrKXtjb25zdCBpPV8uX19kaWdpdChnKStuO249aT4+PjMwLHQuX19zZXREaWdpdChnLDEwNzM3NDE4MjMmaSl9cmV0dXJuIDAhPW4mJnQuX19zZXREaWdpdEdyb3coZSwxKSx0fXN0YXRpYyBfX2Fic29sdXRlU3ViT25lKF8sdCl7Y29uc3QgZT1fLmxlbmd0aDt0PXR8fGU7Y29uc3Qgbj1uZXcgSlNCSSh0LCExKTtsZXQgZz0xO2ZvcihsZXQgcz0wO3M8ZTtzKyspe2NvbnN0IGk9Xy5fX2RpZ2l0KHMpLWc7Zz0xJmk+Pj4zMCxuLl9fc2V0RGlnaXQocywxMDczNzQxODIzJmkpfWlmKDAhPWcpdGhyb3cgbmV3IEVycm9yKFwiaW1wbGVtZW50YXRpb24gYnVnXCIpO2ZvcihsZXQgZz1lO2c8dDtnKyspbi5fX3NldERpZ2l0KGcsMCk7cmV0dXJuIG59c3RhdGljIF9fYWJzb2x1dGVBbmQoXyx0LGU9bnVsbCl7bGV0IG49Xy5sZW5ndGgsZz10Lmxlbmd0aCxzPWc7aWYobjxnKXtzPW47Y29uc3QgaT1fLGU9bjtfPXQsbj1nLHQ9aSxnPWV9bGV0IG89cztudWxsPT09ZT9lPW5ldyBKU0JJKG8sITEpOm89ZS5sZW5ndGg7bGV0IGw9MDtmb3IoO2w8cztsKyspZS5fX3NldERpZ2l0KGwsXy5fX2RpZ2l0KGwpJnQuX19kaWdpdChsKSk7Zm9yKDtsPG87bCsrKWUuX19zZXREaWdpdChsLDApO3JldHVybiBlfXN0YXRpYyBfX2Fic29sdXRlQW5kTm90KF8sdCxlPW51bGwpe2NvbnN0IG49Xy5sZW5ndGgsZz10Lmxlbmd0aDtsZXQgcz1nO248ZyYmKHM9bik7bGV0IG89bjtudWxsPT09ZT9lPW5ldyBKU0JJKG8sITEpOm89ZS5sZW5ndGg7bGV0IGw9MDtmb3IoO2w8cztsKyspZS5fX3NldERpZ2l0KGwsXy5fX2RpZ2l0KGwpJn50Ll9fZGlnaXQobCkpO2Zvcig7bDxuO2wrKyllLl9fc2V0RGlnaXQobCxfLl9fZGlnaXQobCkpO2Zvcig7bDxvO2wrKyllLl9fc2V0RGlnaXQobCwwKTtyZXR1cm4gZX1zdGF0aWMgX19hYnNvbHV0ZU9yKF8sdCxlPW51bGwpe2xldCBuPV8ubGVuZ3RoLGc9dC5sZW5ndGgscz1nO2lmKG48Zyl7cz1uO2NvbnN0IGk9XyxlPW47Xz10LG49Zyx0PWksZz1lfWxldCBvPW47bnVsbD09PWU/ZT1uZXcgSlNCSShvLCExKTpvPWUubGVuZ3RoO2xldCBsPTA7Zm9yKDtsPHM7bCsrKWUuX19zZXREaWdpdChsLF8uX19kaWdpdChsKXx0Ll9fZGlnaXQobCkpO2Zvcig7bDxuO2wrKyllLl9fc2V0RGlnaXQobCxfLl9fZGlnaXQobCkpO2Zvcig7bDxvO2wrKyllLl9fc2V0RGlnaXQobCwwKTtyZXR1cm4gZX1zdGF0aWMgX19hYnNvbHV0ZVhvcihfLHQsZT1udWxsKXtsZXQgbj1fLmxlbmd0aCxnPXQubGVuZ3RoLHM9ZztpZihuPGcpe3M9bjtjb25zdCBpPV8sZT1uO189dCxuPWcsdD1pLGc9ZX1sZXQgbz1uO251bGw9PT1lP2U9bmV3IEpTQkkobywhMSk6bz1lLmxlbmd0aDtsZXQgbD0wO2Zvcig7bDxzO2wrKyllLl9fc2V0RGlnaXQobCxfLl9fZGlnaXQobCledC5fX2RpZ2l0KGwpKTtmb3IoO2w8bjtsKyspZS5fX3NldERpZ2l0KGwsXy5fX2RpZ2l0KGwpKTtmb3IoO2w8bztsKyspZS5fX3NldERpZ2l0KGwsMCk7cmV0dXJuIGV9c3RhdGljIF9fYWJzb2x1dGVDb21wYXJlKF8sdCl7Y29uc3QgZT1fLmxlbmd0aC10Lmxlbmd0aDtpZigwIT1lKXJldHVybiBlO2xldCBuPV8ubGVuZ3RoLTE7Zm9yKDswPD1uJiZfLl9fZGlnaXQobik9PT10Ll9fZGlnaXQobik7KW4tLTtyZXR1cm4gMD5uPzA6Xy5fX3Vuc2lnbmVkRGlnaXQobik+dC5fX3Vuc2lnbmVkRGlnaXQobik/MTotMX1zdGF0aWMgX19tdWx0aXBseUFjY3VtdWxhdGUoXyx0LGUsbil7aWYoMD09PXQpcmV0dXJuO2NvbnN0IGc9MzI3NjcmdCxzPXQ+Pj4xNTtsZXQgbz0wLGw9MDtmb3IobGV0IHIsYT0wO2E8Xy5sZW5ndGg7YSsrLG4rKyl7cj1lLl9fZGlnaXQobik7Y29uc3QgaT1fLl9fZGlnaXQoYSksdD0zMjc2NyZpLHU9aT4+PjE1LGQ9SlNCSS5fX2ltdWwodCxnKSxoPUpTQkkuX19pbXVsKHQscyksbT1KU0JJLl9faW11bCh1LGcpLGI9SlNCSS5fX2ltdWwodSxzKTtyKz1sK2QrbyxvPXI+Pj4zMCxyJj0xMDczNzQxODIzLHIrPSgoMzI3NjcmaCk8PDE1KSsoKDMyNzY3Jm0pPDwxNSksbys9cj4+PjMwLGw9YisoaD4+PjE1KSsobT4+PjE1KSxlLl9fc2V0RGlnaXQobiwxMDczNzQxODIzJnIpfWZvcig7MCE9b3x8MCE9PWw7bisrKXtsZXQgaT1lLl9fZGlnaXQobik7aSs9bytsLGw9MCxvPWk+Pj4zMCxlLl9fc2V0RGlnaXQobiwxMDczNzQxODIzJmkpfX1zdGF0aWMgX19pbnRlcm5hbE11bHRpcGx5QWRkKF8sdCxlLGcscyl7bGV0IG89ZSxsPTA7Zm9yKGxldCBuPTA7bjxnO24rKyl7Y29uc3QgaT1fLl9fZGlnaXQobiksZT1KU0JJLl9faW11bCgzMjc2NyZpLHQpLGc9SlNCSS5fX2ltdWwoaT4+PjE1LHQpLGE9ZSsoKDMyNzY3JmcpPDwxNSkrbCtvO289YT4+PjMwLGw9Zz4+PjE1LHMuX19zZXREaWdpdChuLDEwNzM3NDE4MjMmYSl9aWYocy5sZW5ndGg+Zylmb3Iocy5fX3NldERpZ2l0KGcrKyxvK2wpO2c8cy5sZW5ndGg7KXMuX19zZXREaWdpdChnKyssMCk7ZWxzZSBpZigwIT09bytsKXRocm93IG5ldyBFcnJvcihcImltcGxlbWVudGF0aW9uIGJ1Z1wiKX1fX2lucGxhY2VNdWx0aXBseUFkZChpLF8sdCl7dD50aGlzLmxlbmd0aCYmKHQ9dGhpcy5sZW5ndGgpO2NvbnN0IGU9MzI3NjcmaSxuPWk+Pj4xNTtsZXQgZz0wLHM9Xztmb3IobGV0IG89MDtvPHQ7bysrKXtjb25zdCBpPXRoaXMuX19kaWdpdChvKSxfPTMyNzY3JmksdD1pPj4+MTUsbD1KU0JJLl9faW11bChfLGUpLHI9SlNCSS5fX2ltdWwoXyxuKSxhPUpTQkkuX19pbXVsKHQsZSksdT1KU0JJLl9faW11bCh0LG4pO2xldCBkPXMrbCtnO2c9ZD4+PjMwLGQmPTEwNzM3NDE4MjMsZCs9KCgzMjc2NyZyKTw8MTUpKygoMzI3NjcmYSk8PDE1KSxnKz1kPj4+MzAscz11KyhyPj4+MTUpKyhhPj4+MTUpLHRoaXMuX19zZXREaWdpdChvLDEwNzM3NDE4MjMmZCl9aWYoMCE9Z3x8MCE9PXMpdGhyb3cgbmV3IEVycm9yKFwiaW1wbGVtZW50YXRpb24gYnVnXCIpfXN0YXRpYyBfX2Fic29sdXRlRGl2U21hbGwoXyx0LGU9bnVsbCl7bnVsbD09PWUmJihlPW5ldyBKU0JJKF8ubGVuZ3RoLCExKSk7bGV0IG49MDtmb3IobGV0IGcscz0yKl8ubGVuZ3RoLTE7MDw9cztzLT0yKXtnPShuPDwxNXxfLl9faGFsZkRpZ2l0KHMpKT4+PjA7Y29uc3QgaT0wfGcvdDtuPTB8ZyV0LGc9KG48PDE1fF8uX19oYWxmRGlnaXQocy0xKSk+Pj4wO2NvbnN0IG89MHxnL3Q7bj0wfGcldCxlLl9fc2V0RGlnaXQocz4+PjEsaTw8MTV8byl9cmV0dXJuIGV9c3RhdGljIF9fYWJzb2x1dGVNb2RTbWFsbChfLHQpe2xldCBlPTA7Zm9yKGxldCBuPTIqXy5sZW5ndGgtMTswPD1uO24tLSl7Y29uc3QgaT0oZTw8MTV8Xy5fX2hhbGZEaWdpdChuKSk+Pj4wO2U9MHxpJXR9cmV0dXJuIGV9c3RhdGljIF9fYWJzb2x1dGVEaXZMYXJnZShpLF8sdCxlKXtjb25zdCBnPV8uX19oYWxmRGlnaXRMZW5ndGgoKSxuPV8ubGVuZ3RoLHM9aS5fX2hhbGZEaWdpdExlbmd0aCgpLWc7bGV0IG89bnVsbDt0JiYobz1uZXcgSlNCSShzKzI+Pj4xLCExKSxvLl9faW5pdGlhbGl6ZURpZ2l0cygpKTtjb25zdCBsPW5ldyBKU0JJKGcrMj4+PjEsITEpO2wuX19pbml0aWFsaXplRGlnaXRzKCk7Y29uc3Qgcj1KU0JJLl9fY2x6MTUoXy5fX2hhbGZEaWdpdChnLTEpKTswPHImJihfPUpTQkkuX19zcGVjaWFsTGVmdFNoaWZ0KF8sciwwKSk7Y29uc3QgYT1KU0JJLl9fc3BlY2lhbExlZnRTaGlmdChpLHIsMSksdT1fLl9faGFsZkRpZ2l0KGctMSk7bGV0IGQ9MDtmb3IobGV0IHIsaD1zOzA8PWg7aC0tKXtyPTMyNzY3O2NvbnN0IGk9YS5fX2hhbGZEaWdpdChoK2cpO2lmKGkhPT11KXtjb25zdCB0PShpPDwxNXxhLl9faGFsZkRpZ2l0KGgrZy0xKSk+Pj4wO3I9MHx0L3U7bGV0IGU9MHx0JXU7Y29uc3Qgbj1fLl9faGFsZkRpZ2l0KGctMikscz1hLl9faGFsZkRpZ2l0KGgrZy0yKTtmb3IoO0pTQkkuX19pbXVsKHIsbik+Pj4wPihlPDwxNnxzKT4+PjAmJihyLS0sZSs9dSwhKDMyNzY3PGUpKTspO31KU0JJLl9faW50ZXJuYWxNdWx0aXBseUFkZChfLHIsMCxuLGwpO2xldCBlPWEuX19pbnBsYWNlU3ViKGwsaCxnKzEpOzAhPT1lJiYoZT1hLl9faW5wbGFjZUFkZChfLGgsZyksYS5fX3NldEhhbGZEaWdpdChoK2csMzI3NjcmYS5fX2hhbGZEaWdpdChoK2cpK2UpLHItLSksdCYmKDEmaD9kPXI8PDE1Om8uX19zZXREaWdpdChoPj4+MSxkfHIpKX1pZihlKXJldHVybiBhLl9faW5wbGFjZVJpZ2h0U2hpZnQociksdD97cXVvdGllbnQ6byxyZW1haW5kZXI6YX06YTtpZih0KXJldHVybiBvO3Rocm93IG5ldyBFcnJvcihcInVucmVhY2hhYmxlXCIpfXN0YXRpYyBfX2NsejE1KGkpe3JldHVybiBKU0JJLl9fY2x6MzAoaSktMTV9X19pbnBsYWNlQWRkKF8sdCxlKXtsZXQgbj0wO2ZvcihsZXQgZz0wO2c8ZTtnKyspe2NvbnN0IGk9dGhpcy5fX2hhbGZEaWdpdCh0K2cpK18uX19oYWxmRGlnaXQoZykrbjtuPWk+Pj4xNSx0aGlzLl9fc2V0SGFsZkRpZ2l0KHQrZywzMjc2NyZpKX1yZXR1cm4gbn1fX2lucGxhY2VTdWIoXyx0LGUpe2xldCBuPTA7aWYoMSZ0KXt0Pj49MTtsZXQgZz10aGlzLl9fZGlnaXQodCkscz0zMjc2NyZnLG89MDtmb3IoO288ZS0xPj4+MTtvKyspe2NvbnN0IGk9Xy5fX2RpZ2l0KG8pLGU9KGc+Pj4xNSktKDMyNzY3JmkpLW47bj0xJmU+Pj4xNSx0aGlzLl9fc2V0RGlnaXQodCtvLCgzMjc2NyZlKTw8MTV8MzI3NjcmcyksZz10aGlzLl9fZGlnaXQodCtvKzEpLHM9KDMyNzY3JmcpLShpPj4+MTUpLW4sbj0xJnM+Pj4xNX1jb25zdCBpPV8uX19kaWdpdChvKSxsPShnPj4+MTUpLSgzMjc2NyZpKS1uO249MSZsPj4+MTUsdGhpcy5fX3NldERpZ2l0KHQrbywoMzI3NjcmbCk8PDE1fDMyNzY3JnMpO2lmKHQrbysxPj10aGlzLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIm91dCBvZiBib3VuZHNcIik7MD09KDEmZSkmJihnPXRoaXMuX19kaWdpdCh0K28rMSkscz0oMzI3NjcmZyktKGk+Pj4xNSktbixuPTEmcz4+PjE1LHRoaXMuX19zZXREaWdpdCh0K18ubGVuZ3RoLDEwNzM3MDkwNTYmZ3wzMjc2NyZzKSl9ZWxzZXt0Pj49MTtsZXQgZz0wO2Zvcig7ZzxfLmxlbmd0aC0xO2crKyl7Y29uc3QgaT10aGlzLl9fZGlnaXQodCtnKSxlPV8uX19kaWdpdChnKSxzPSgzMjc2NyZpKS0oMzI3NjcmZSktbjtuPTEmcz4+PjE1O2NvbnN0IG89KGk+Pj4xNSktKGU+Pj4xNSktbjtuPTEmbz4+PjE1LHRoaXMuX19zZXREaWdpdCh0K2csKDMyNzY3Jm8pPDwxNXwzMjc2NyZzKX1jb25zdCBpPXRoaXMuX19kaWdpdCh0K2cpLHM9Xy5fX2RpZ2l0KGcpLG89KDMyNzY3JmkpLSgzMjc2NyZzKS1uO249MSZvPj4+MTU7bGV0IGw9MDswPT0oMSZlKSYmKGw9KGk+Pj4xNSktKHM+Pj4xNSktbixuPTEmbD4+PjE1KSx0aGlzLl9fc2V0RGlnaXQodCtnLCgzMjc2NyZsKTw8MTV8MzI3Njcmbyl9cmV0dXJuIG59X19pbnBsYWNlUmlnaHRTaGlmdChfKXtpZigwPT09XylyZXR1cm47bGV0IHQ9dGhpcy5fX2RpZ2l0KDApPj4+Xztjb25zdCBlPXRoaXMubGVuZ3RoLTE7Zm9yKGxldCBuPTA7bjxlO24rKyl7Y29uc3QgaT10aGlzLl9fZGlnaXQobisxKTt0aGlzLl9fc2V0RGlnaXQobiwxMDczNzQxODIzJmk8PDMwLV98dCksdD1pPj4+X310aGlzLl9fc2V0RGlnaXQoZSx0KX1zdGF0aWMgX19zcGVjaWFsTGVmdFNoaWZ0KF8sdCxlKXtjb25zdCBnPV8ubGVuZ3RoLG49bmV3IEpTQkkoZytlLCExKTtpZigwPT09dCl7Zm9yKGxldCB0PTA7dDxnO3QrKyluLl9fc2V0RGlnaXQodCxfLl9fZGlnaXQodCkpO3JldHVybiAwPGUmJm4uX19zZXREaWdpdChnLDApLG59bGV0IHM9MDtmb3IobGV0IG89MDtvPGc7bysrKXtjb25zdCBpPV8uX19kaWdpdChvKTtuLl9fc2V0RGlnaXQobywxMDczNzQxODIzJmk8PHR8cykscz1pPj4+MzAtdH1yZXR1cm4gMDxlJiZuLl9fc2V0RGlnaXQoZyxzKSxufXN0YXRpYyBfX2xlZnRTaGlmdEJ5QWJzb2x1dGUoXyxpKXtjb25zdCB0PUpTQkkuX190b1NoaWZ0QW1vdW50KGkpO2lmKDA+dCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkJpZ0ludCB0b28gYmlnXCIpO2NvbnN0IGU9MHx0LzMwLG49dCUzMCxnPV8ubGVuZ3RoLHM9MCE9PW4mJjAhPV8uX19kaWdpdChnLTEpPj4+MzAtbixvPWcrZSsocz8xOjApLGw9bmV3IEpTQkkobyxfLnNpZ24pO2lmKDA9PT1uKXtsZXQgdD0wO2Zvcig7dDxlO3QrKylsLl9fc2V0RGlnaXQodCwwKTtmb3IoO3Q8bzt0KyspbC5fX3NldERpZ2l0KHQsXy5fX2RpZ2l0KHQtZSkpfWVsc2V7bGV0IHQ9MDtmb3IobGV0IF89MDtfPGU7XysrKWwuX19zZXREaWdpdChfLDApO2ZvcihsZXQgcz0wO3M8ZztzKyspe2NvbnN0IGk9Xy5fX2RpZ2l0KHMpO2wuX19zZXREaWdpdChzK2UsMTA3Mzc0MTgyMyZpPDxufHQpLHQ9aT4+PjMwLW59aWYocylsLl9fc2V0RGlnaXQoZytlLHQpO2Vsc2UgaWYoMCE9PXQpdGhyb3cgbmV3IEVycm9yKFwiaW1wbGVtZW50YXRpb24gYnVnXCIpfXJldHVybiBsLl9fdHJpbSgpfXN0YXRpYyBfX3JpZ2h0U2hpZnRCeUFic29sdXRlKF8saSl7Y29uc3QgdD1fLmxlbmd0aCxlPV8uc2lnbixuPUpTQkkuX190b1NoaWZ0QW1vdW50KGkpO2lmKDA+bilyZXR1cm4gSlNCSS5fX3JpZ2h0U2hpZnRCeU1heGltdW0oZSk7Y29uc3QgZz0wfG4vMzAscz1uJTMwO2xldCBvPXQtZztpZigwPj1vKXJldHVybiBKU0JJLl9fcmlnaHRTaGlmdEJ5TWF4aW11bShlKTtsZXQgbD0hMTtpZihlKXtpZigwIT0oXy5fX2RpZ2l0KGcpJigxPDxzKS0xKSlsPSEwO2Vsc2UgZm9yKGxldCB0PTA7dDxnO3QrKylpZigwIT09Xy5fX2RpZ2l0KHQpKXtsPSEwO2JyZWFrfX1pZihsJiYwPT09cyl7Y29uc3QgaT1fLl9fZGlnaXQodC0xKTswPT1+aSYmbysrfWxldCByPW5ldyBKU0JJKG8sZSk7aWYoMD09PXMpe3IuX19zZXREaWdpdChvLTEsMCk7Zm9yKGxldCBlPWc7ZTx0O2UrKylyLl9fc2V0RGlnaXQoZS1nLF8uX19kaWdpdChlKSl9ZWxzZXtsZXQgZT1fLl9fZGlnaXQoZyk+Pj5zO2NvbnN0IG49dC1nLTE7Zm9yKGxldCB0PTA7dDxuO3QrKyl7Y29uc3QgaT1fLl9fZGlnaXQodCtnKzEpO3IuX19zZXREaWdpdCh0LDEwNzM3NDE4MjMmaTw8MzAtc3xlKSxlPWk+Pj5zfXIuX19zZXREaWdpdChuLGUpfXJldHVybiBsJiYocj1KU0JJLl9fYWJzb2x1dGVBZGRPbmUociwhMCxyKSksci5fX3RyaW0oKX1zdGF0aWMgX19yaWdodFNoaWZ0QnlNYXhpbXVtKGkpe3JldHVybiBpP0pTQkkuX19vbmVEaWdpdCgxLCEwKTpKU0JJLl9femVybygpfXN0YXRpYyBfX3RvU2hpZnRBbW91bnQoaSl7aWYoMTxpLmxlbmd0aClyZXR1cm4tMTtjb25zdCBfPWkuX191bnNpZ25lZERpZ2l0KDApO3JldHVybiBfPkpTQkkuX19rTWF4TGVuZ3RoQml0cz8tMTpffXN0YXRpYyBfX3RvUHJpbWl0aXZlKGksXz1cImRlZmF1bHRcIil7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGkpcmV0dXJuIGk7aWYoaS5jb25zdHJ1Y3Rvcj09PUpTQkkpcmV0dXJuIGk7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC50b1ByaW1pdGl2ZSl7Y29uc3QgdD1pW1N5bWJvbC50b1ByaW1pdGl2ZV07aWYodCl7Y29uc3QgaT10KF8pO2lmKFwib2JqZWN0XCIhPXR5cGVvZiBpKXJldHVybiBpO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpfX1jb25zdCB0PWkudmFsdWVPZjtpZih0KXtjb25zdCBfPXQuY2FsbChpKTtpZihcIm9iamVjdFwiIT10eXBlb2YgXylyZXR1cm4gX31jb25zdCBlPWkudG9TdHJpbmc7aWYoZSl7Y29uc3QgXz1lLmNhbGwoaSk7aWYoXCJvYmplY3RcIiE9dHlwZW9mIF8pcmV0dXJuIF99dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIil9c3RhdGljIF9fdG9OdW1lcmljKGkpe3JldHVybiBKU0JJLl9faXNCaWdJbnQoaSk/aToraX1zdGF0aWMgX19pc0JpZ0ludChpKXtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgaSYmbnVsbCE9PWkmJmkuY29uc3RydWN0b3I9PT1KU0JJfXN0YXRpYyBfX3RydW5jYXRlVG9OQml0cyhpLF8pe2NvbnN0IHQ9MHwoaSsyOSkvMzAsZT1uZXcgSlNCSSh0LF8uc2lnbiksbj10LTE7Zm9yKGxldCB0PTA7dDxuO3QrKyllLl9fc2V0RGlnaXQodCxfLl9fZGlnaXQodCkpO2xldCBnPV8uX19kaWdpdChuKTtpZigwIT1pJTMwKXtjb25zdCBfPTMyLWklMzA7Zz1nPDxfPj4+X31yZXR1cm4gZS5fX3NldERpZ2l0KG4sZyksZS5fX3RyaW0oKX1zdGF0aWMgX190cnVuY2F0ZUFuZFN1YkZyb21Qb3dlck9mVHdvKF8sdCxlKXt2YXIgbj1NYXRoLm1pbjtjb25zdCBnPTB8KF8rMjkpLzMwLHM9bmV3IEpTQkkoZyxlKTtsZXQgbz0wO2NvbnN0IGw9Zy0xO2xldCBhPTA7Zm9yKGNvbnN0IGk9bihsLHQubGVuZ3RoKTtvPGk7bysrKXtjb25zdCBpPTAtdC5fX2RpZ2l0KG8pLWE7YT0xJmk+Pj4zMCxzLl9fc2V0RGlnaXQobywxMDczNzQxODIzJmkpfWZvcig7bzxsO28rKylzLl9fc2V0RGlnaXQobywwfDEwNzM3NDE4MjMmLWEpO2xldCB1PWw8dC5sZW5ndGg/dC5fX2RpZ2l0KGwpOjA7Y29uc3QgZD1fJTMwO2xldCBoO2lmKDA9PWQpaD0wLXUtYSxoJj0xMDczNzQxODIzO2Vsc2V7Y29uc3QgaT0zMi1kO3U9dTw8aT4+Pmk7Y29uc3QgXz0xPDwzMi1pO2g9Xy11LWEsaCY9Xy0xfXJldHVybiBzLl9fc2V0RGlnaXQobCxoKSxzLl9fdHJpbSgpfV9fZGlnaXQoXyl7cmV0dXJuIHRoaXNbX119X191bnNpZ25lZERpZ2l0KF8pe3JldHVybiB0aGlzW19dPj4+MH1fX3NldERpZ2l0KF8saSl7dGhpc1tfXT0wfGl9X19zZXREaWdpdEdyb3coXyxpKXt0aGlzW19dPTB8aX1fX2hhbGZEaWdpdExlbmd0aCgpe2NvbnN0IGk9dGhpcy5sZW5ndGg7cmV0dXJuIDMyNzY3Pj10aGlzLl9fdW5zaWduZWREaWdpdChpLTEpPzIqaS0xOjIqaX1fX2hhbGZEaWdpdChfKXtyZXR1cm4gMzI3NjcmdGhpc1tfPj4+MV0+Pj4xNSooMSZfKX1fX3NldEhhbGZEaWdpdChfLGkpe2NvbnN0IHQ9Xz4+PjEsZT10aGlzLl9fZGlnaXQodCksbj0xJl8/MzI3NjcmZXxpPDwxNToxMDczNzA5MDU2JmV8MzI3NjcmaTt0aGlzLl9fc2V0RGlnaXQodCxuKX1zdGF0aWMgX19kaWdpdFBvdyhpLF8pe2xldCB0PTE7Zm9yKDswPF87KTEmXyYmKHQqPWkpLF8+Pj49MSxpKj1pO3JldHVybiB0fXN0YXRpYyBfX2lzT25lRGlnaXRJbnQoaSl7cmV0dXJuKDEwNzM3NDE4MjMmaSk9PT1pfX1KU0JJLl9fa01heExlbmd0aD0zMzU1NDQzMixKU0JJLl9fa01heExlbmd0aEJpdHM9SlNCSS5fX2tNYXhMZW5ndGg8PDUsSlNCSS5fX2tNYXhCaXRzUGVyQ2hhcj1bMCwwLDMyLDUxLDY0LDc1LDgzLDkwLDk2LDEwMiwxMDcsMTExLDExNSwxMTksMTIyLDEyNiwxMjgsMTMxLDEzNCwxMzYsMTM5LDE0MSwxNDMsMTQ1LDE0NywxNDksMTUxLDE1MywxNTQsMTU2LDE1OCwxNTksMTYwLDE2MiwxNjMsMTY1LDE2Nl0sSlNCSS5fX2tCaXRzUGVyQ2hhclRhYmxlU2hpZnQ9NSxKU0JJLl9fa0JpdHNQZXJDaGFyVGFibGVNdWx0aXBsaWVyPTE8PEpTQkkuX19rQml0c1BlckNoYXJUYWJsZVNoaWZ0LEpTQkkuX19rQ29udmVyc2lvbkNoYXJzPVtcIjBcIixcIjFcIixcIjJcIixcIjNcIixcIjRcIixcIjVcIixcIjZcIixcIjdcIixcIjhcIixcIjlcIixcImFcIixcImJcIixcImNcIixcImRcIixcImVcIixcImZcIixcImdcIixcImhcIixcImlcIixcImpcIixcImtcIixcImxcIixcIm1cIixcIm5cIixcIm9cIixcInBcIixcInFcIixcInJcIixcInNcIixcInRcIixcInVcIixcInZcIixcIndcIixcInhcIixcInlcIixcInpcIl0sSlNCSS5fX2tCaXRDb252ZXJzaW9uQnVmZmVyPW5ldyBBcnJheUJ1ZmZlcig4KSxKU0JJLl9fa0JpdENvbnZlcnNpb25Eb3VibGU9bmV3IEZsb2F0NjRBcnJheShKU0JJLl9fa0JpdENvbnZlcnNpb25CdWZmZXIpLEpTQkkuX19rQml0Q29udmVyc2lvbkludHM9bmV3IEludDMyQXJyYXkoSlNCSS5fX2tCaXRDb252ZXJzaW9uQnVmZmVyKSxKU0JJLl9fY2x6MzA9TWF0aC5jbHozMj9mdW5jdGlvbihpKXtyZXR1cm4gTWF0aC5jbHozMihpKS0yfTpmdW5jdGlvbihpKXtyZXR1cm4gMD09PWk/MzA6MHwyOS0oMHxNYXRoLmxvZyhpPj4+MCkvTWF0aC5MTjIpfSxKU0JJLl9faW11bD1NYXRoLmltdWx8fGZ1bmN0aW9uKGksXyl7cmV0dXJuIDB8aSpffTtleHBvcnQgZGVmYXVsdCBKU0JJO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9anNiaS5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/jsbi/dist/jsbi.mjs\n");

/***/ })

};
;